
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000026  00800100  00001076  0000110a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800126  00800126  00001130  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a56  00000000  00000000  00003bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000560a  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000561c  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  0000565c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000061f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  0000620f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c8 00 	jmp	0x190	; 0x190 <__ctors_end>
       4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       8:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
       c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
      64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	46 45       	sbci	r20, 0x56	; 86
      6a:	52 54       	subi	r21, 0x42	; 66
      6c:	49 47       	sbci	r20, 0x79	; 121
      6e:	21 21       	and	r18, r1
      70:	0d 0a       	sbc	r0, r29
	...

00000073 <__c.2405>:
      73:	46 45 52 54 49 47 21 21 0d 0a 00                    FERTIG!!...

0000007e <__c.2397>:
      7e:	25 63 00                                            %c.

00000081 <__c.2393>:
      81:	0a 46 69 6c 65 20 46 6f 75 6e 64 21 21 0d 0a 00     .File Found!!...

00000091 <__c.2391>:
      91:	0d 0a 44 69 72 65 63 74 6f 72 79 20 45 6e 64 65     ..Directory Ende
      a1:	0d 0a 00                                            ...

000000a4 <__c.2387>:
      a4:	0d 0a 00                                            ...

000000a7 <__c.2385>:
      a7:	25 73 00                                            %s.

000000aa <__c.2383>:
      aa:	43 6c 75 73 74 65 72 20 3d 20 25 34 78 20 44 69     Cluster = %4x Di
      ba:	72 41 20 3d 20 25 32 78 20 46 69 6c 65 4e 61 6d     rA = %2x FileNam
      ca:	65 20 3d 20 00                                      e = .

000000cf <__c.2379>:
      cf:	0d 0a 44 69 72 65 63 74 6f 72 79 0d 0a 00           ..Directory...

000000dd <__c.2371>:
      dd:	25 78 20 00                                         %x .

000000e1 <__c.2367>:
      e1:	4b 61 72 74 65 20 67 65 66 75 6e 64 65 6e 21 21     Karte gefunden!!
      f1:	0a 00                                               ..

000000f3 <__c.2362>:
      f3:	2a 2a 20 4b 65 69 6e 65 20 4d 4d 43 2f 53 44 20     ** Keine MMC/SD 
     103:	4b 61 72 74 65 20 67 65 66 75 6e 64 65 6e 21 21     Karte gefunden!!
     113:	20 2a 2a 0a 00                                       **..

00000118 <__c.2360>:
     118:	53 79 73 74 65 6d 20 52 65 61 64 79 21 0d 0a 00     System Ready!...

00000128 <__c.2128>:
     128:	0d 0a 56 42 52 20 53 69 67 6e 61 74 75 72 20 6e     ..VBR Signatur n
     138:	6f 74 20 66 6f 75 6e 64 21 0d 0a 00                 ot found!...

00000144 <__c.2126>:
     144:	0d 0a 56 42 52 20 53 69 67 6e 61 74 75 72 20 66     ..VBR Signatur f
     154:	6f 75 6e 64 21 0d 0a 00                             ound!...

0000015c <__c.2123>:
     15c:	0d 0a 4d 42 52 20 53 69 67 6e 61 74 75 72 20 6e     ..MBR Signatur n
     16c:	6f 74 20 66 6f 75 6e 64 21 0d 0a 00                 ot found!...

00000178 <__c.2121>:
     178:	0d 0a 4d 42 52 20 53 69 67 6e 61 74 75 72 20 66     ..MBR Signatur f
     188:	6f 75 6e 64 21 0d 0a 00                             ound!...

00000190 <__ctors_end>:
     190:	11 24       	eor	r1, r1
     192:	1f be       	out	0x3f, r1	; 63
     194:	cf ef       	ldi	r28, 0xFF	; 255
     196:	d8 e0       	ldi	r29, 0x08	; 8
     198:	de bf       	out	0x3e, r29	; 62
     19a:	cd bf       	out	0x3d, r28	; 61

0000019c <__do_copy_data>:
     19c:	11 e0       	ldi	r17, 0x01	; 1
     19e:	a0 e0       	ldi	r26, 0x00	; 0
     1a0:	b1 e0       	ldi	r27, 0x01	; 1
     1a2:	e6 e7       	ldi	r30, 0x76	; 118
     1a4:	f0 e1       	ldi	r31, 0x10	; 16
     1a6:	02 c0       	rjmp	.+4      	; 0x1ac <__do_copy_data+0x10>
     1a8:	05 90       	lpm	r0, Z+
     1aa:	0d 92       	st	X+, r0
     1ac:	a6 32       	cpi	r26, 0x26	; 38
     1ae:	b1 07       	cpc	r27, r17
     1b0:	d9 f7       	brne	.-10     	; 0x1a8 <__do_copy_data+0xc>

000001b2 <__do_clear_bss>:
     1b2:	21 e0       	ldi	r18, 0x01	; 1
     1b4:	a6 e2       	ldi	r26, 0x26	; 38
     1b6:	b1 e0       	ldi	r27, 0x01	; 1
     1b8:	01 c0       	rjmp	.+2      	; 0x1bc <.do_clear_bss_start>

000001ba <.do_clear_bss_loop>:
     1ba:	1d 92       	st	X+, r1

000001bc <.do_clear_bss_start>:
     1bc:	ad 32       	cpi	r26, 0x2D	; 45
     1be:	b2 07       	cpc	r27, r18
     1c0:	e1 f7       	brne	.-8      	; 0x1ba <.do_clear_bss_loop>
     1c2:	0e 94 54 06 	call	0xca8	; 0xca8 <main>
     1c6:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_exit>

000001ca <__bad_interrupt>:
     1ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ce <mmc_read_byte>:
unsigned char mmc_read_byte (void)
//############################################################################
{
	unsigned char Byte = 0;
#if SPI_Mode	//Routine für Hardware SPI
	SPDR = 0xff;
     1ce:	8f ef       	ldi	r24, 0xFF	; 255
     1d0:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))){};
     1d2:	0d b4       	in	r0, 0x2d	; 45
     1d4:	07 fe       	sbrs	r0, 7
     1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <mmc_read_byte+0x4>
	Byte = SPDR;
     1d8:	8e b5       	in	r24, 0x2e	; 46
				}
		MMC_Write |=(1<<SPI_Clock); //setzt Clock Impuls wieder auf (High)		
		}
#endif
	return (Byte);
}
     1da:	08 95       	ret

000001dc <mmc_write_byte>:
//Routine zum Senden eines Bytes zur MMC-Karte
void mmc_write_byte (unsigned char Byte)
//############################################################################
{
#if SPI_Mode		//Routine für Hardware SPI
	SPDR = Byte; 	//Sendet ein Byte
     1dc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) //Wartet bis Byte gesendet wurde
     1de:	0d b4       	in	r0, 0x2d	; 45
     1e0:	07 fe       	sbrs	r0, 7
     1e2:	fd cf       	rjmp	.-6      	; 0x1de <mmc_write_byte+0x2>
		
		MMC_Write |= (1<<SPI_Clock); //setzt Clock Impuls wieder auf (High)
	}
	MMC_Write |= (1<<SPI_DO);	//setzt Output wieder auf High	
#endif
}
     1e4:	08 95       	ret

000001e6 <mmc_write_command>:
{
     1e6:	0f 93       	push	r16
     1e8:	1f 93       	push	r17
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	ec 01       	movw	r28, r24
	MMC_Disable();
     1f0:	2e 9a       	sbi	0x05, 6	; 5
	mmc_write_byte(0xFF);
     1f2:	8f ef       	ldi	r24, 0xFF	; 255
     1f4:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
	MMC_Enable();
     1f8:	2e 98       	cbi	0x05, 6	; 5
     1fa:	8e 01       	movw	r16, r28
     1fc:	0a 5f       	subi	r16, 0xFA	; 250
     1fe:	1f 4f       	sbci	r17, 0xFF	; 255
		mmc_write_byte(*cmd++);
     200:	89 91       	ld	r24, Y+
     202:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
	for (unsigned char a = 0;a<0x06;a++) //sendet 6 Byte Commando zur MMC/SD-Karte
     206:	c0 17       	cp	r28, r16
     208:	d1 07       	cpc	r29, r17
     20a:	d1 f7       	brne	.-12     	; 0x200 <mmc_write_command+0x1a>
     20c:	c6 ef       	ldi	r28, 0xF6	; 246
     20e:	d1 e0       	ldi	r29, 0x01	; 1
		tmp = mmc_read_byte();
     210:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
     214:	21 97       	sbiw	r28, 0x01	; 1
		if (Timeout++ > 500)
     216:	11 f0       	breq	.+4      	; 0x21c <mmc_write_command+0x36>
	while (tmp == 0xff)	
     218:	8f 3f       	cpi	r24, 0xFF	; 255
     21a:	d1 f3       	breq	.-12     	; 0x210 <mmc_write_command+0x2a>
}
     21c:	df 91       	pop	r29
     21e:	cf 91       	pop	r28
     220:	1f 91       	pop	r17
     222:	0f 91       	pop	r16
     224:	08 95       	ret

00000226 <mmc_init>:
{
     226:	0f 93       	push	r16
     228:	1f 93       	push	r17
     22a:	cf 93       	push	r28
     22c:	df 93       	push	r29
     22e:	00 d0       	rcall	.+0      	; 0x230 <mmc_init+0xa>
     230:	00 d0       	rcall	.+0      	; 0x232 <mmc_init+0xc>
     232:	00 d0       	rcall	.+0      	; 0x234 <mmc_init+0xe>
     234:	cd b7       	in	r28, 0x3d	; 61
     236:	de b7       	in	r29, 0x3e	; 62
	MMC_Direction_REG &=~(1<<SPI_DI);			//Setzen von Pin MMC_DI auf Input
     238:	24 98       	cbi	0x04, 4	; 4
	MMC_Direction_REG |= (1<<SPI_Clock);		//Setzen von Pin MMC_Clock auf Output
     23a:	25 9a       	sbi	0x04, 5	; 4
	MMC_Direction_REG |= (1<<SPI_DO);			//Setzen von Pin MMC_DO auf Output
     23c:	23 9a       	sbi	0x04, 3	; 4
	MMC_Direction_REG |= (1<<MMC_Chip_Select);	//Setzen von Pin MMC_Chip_Select auf Output
     23e:	26 9a       	sbi	0x04, 6	; 4
	MMC_Direction_REG |= (1<<SPI_SS);	
     240:	22 9a       	sbi	0x04, 2	; 4
	MMC_Write |= (1<<MMC_Chip_Select);			//Setzt den Pin MMC_Chip_Select auf High Pegel
     242:	2e 9a       	sbi	0x05, 6	; 5
     244:	88 ec       	ldi	r24, 0xC8	; 200
	nop();
     246:	00 00       	nop
     248:	81 50       	subi	r24, 0x01	; 1
	for(unsigned char a=0;a<200;a++){
     24a:	e9 f7       	brne	.-6      	; 0x246 <mmc_init+0x20>
		SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<SPR1); //Enable SPI, SPI in Master Mode	
     24c:	83 e5       	ldi	r24, 0x53	; 83
     24e:	8c bd       	out	0x2c, r24	; 44
		SPSR = (0<<SPI2X);
     250:	1d bc       	out	0x2d, r1	; 45
     252:	1f e0       	ldi	r17, 0x0F	; 15
		mmc_write_byte(0xff);
     254:	8f ef       	ldi	r24, 0xFF	; 255
     256:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
     25a:	11 50       	subi	r17, 0x01	; 1
	for (unsigned char b = 0;b<0x0f;b++) //Sendet min 74+ Clocks an die MMC/SD-Karte
     25c:	d9 f7       	brne	.-10     	; 0x254 <mmc_init+0x2e>
	unsigned char CMD[] = {0x40,0x00,0x00,0x00,0x00,0x95};
     25e:	86 e0       	ldi	r24, 0x06	; 6
     260:	e0 e0       	ldi	r30, 0x00	; 0
     262:	f1 e0       	ldi	r31, 0x01	; 1
     264:	de 01       	movw	r26, r28
     266:	11 96       	adiw	r26, 0x01	; 1
     268:	01 90       	ld	r0, Z+
     26a:	0d 92       	st	X+, r0
     26c:	8a 95       	dec	r24
     26e:	e1 f7       	brne	.-8      	; 0x268 <mmc_init+0x42>
	while(mmc_write_command (CMD) !=1)
     270:	0a ec       	ldi	r16, 0xCA	; 202
     272:	10 e0       	ldi	r17, 0x00	; 0
     274:	ce 01       	movw	r24, r28
     276:	01 96       	adiw	r24, 0x01	; 1
     278:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <mmc_write_command>
     27c:	81 30       	cpi	r24, 0x01	; 1
     27e:	a1 f4       	brne	.+40     	; 0x2a8 <mmc_init+0x82>
	CMD[0] = 0x41;//Commando 1
     280:	81 e4       	ldi	r24, 0x41	; 65
     282:	89 83       	std	Y+1, r24	; 0x01
	CMD[5] = 0xFF;
     284:	8f ef       	ldi	r24, 0xFF	; 255
     286:	8e 83       	std	Y+6, r24	; 0x06
	while( mmc_write_command (CMD) !=0)
     288:	02 e9       	ldi	r16, 0x92	; 146
     28a:	11 e0       	ldi	r17, 0x01	; 1
     28c:	ce 01       	movw	r24, r28
     28e:	01 96       	adiw	r24, 0x01	; 1
     290:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <mmc_write_command>
     294:	81 11       	cpse	r24, r1
     296:	18 c0       	rjmp	.+48     	; 0x2c8 <mmc_init+0xa2>
		SPCR &= ~((1<<SPR0) | (1<<SPR1));
     298:	9c b5       	in	r25, 0x2c	; 44
     29a:	9c 7f       	andi	r25, 0xFC	; 252
     29c:	9c bd       	out	0x2c, r25	; 44
		SPSR = SPSR|(1<<SPI2X);
     29e:	9d b5       	in	r25, 0x2d	; 45
     2a0:	91 60       	ori	r25, 0x01	; 1
     2a2:	9d bd       	out	0x2d, r25	; 45
	MMC_Disable();
     2a4:	2e 9a       	sbi	0x05, 6	; 5
	return(0);
     2a6:	05 c0       	rjmp	.+10     	; 0x2b2 <mmc_init+0x8c>
     2a8:	01 50       	subi	r16, 0x01	; 1
     2aa:	11 09       	sbc	r17, r1
		if (Timeout++ > 200)
     2ac:	19 f7       	brne	.-58     	; 0x274 <mmc_init+0x4e>
			MMC_Disable();
     2ae:	2e 9a       	sbi	0x05, 6	; 5
			return(1); //Abbruch bei Commando1 (Return Code1)
     2b0:	81 e0       	ldi	r24, 0x01	; 1
}
     2b2:	26 96       	adiw	r28, 0x06	; 6
     2b4:	0f b6       	in	r0, 0x3f	; 63
     2b6:	f8 94       	cli
     2b8:	de bf       	out	0x3e, r29	; 62
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	cd bf       	out	0x3d, r28	; 61
     2be:	df 91       	pop	r29
     2c0:	cf 91       	pop	r28
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	08 95       	ret
     2c8:	01 50       	subi	r16, 0x01	; 1
     2ca:	11 09       	sbc	r17, r1
		if (Timeout++ > 400)
     2cc:	f9 f6       	brne	.-66     	; 0x28c <mmc_init+0x66>
			MMC_Disable();
     2ce:	2e 9a       	sbi	0x05, 6	; 5
			return(2); //Abbruch bei Commando2 (Return Code2)
     2d0:	82 e0       	ldi	r24, 0x02	; 2
     2d2:	ef cf       	rjmp	.-34     	; 0x2b2 <mmc_init+0x8c>

000002d4 <mmc_write_sector>:

//############################################################################
//Routine zum schreiben eines Blocks(512Byte) auf die MMC/SD-Karte
unsigned char mmc_write_sector (unsigned long addr,unsigned char *Buffer)
//############################################################################
{
     2d4:	cf 92       	push	r12
     2d6:	df 92       	push	r13
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <mmc_write_sector+0x10>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <mmc_write_sector+0x12>
     2e6:	00 d0       	rcall	.+0      	; 0x2e8 <mmc_write_sector+0x14>
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	8a 01       	movw	r16, r20
	unsigned char tmp;
	//Commando 24 zum schreiben eines Blocks auf die MMC/SD - Karte
	unsigned char cmd[] = {0x58,0x00,0x00,0x00,0x00,0xFF}; 
     2ee:	26 e0       	ldi	r18, 0x06	; 6
     2f0:	e6 e0       	ldi	r30, 0x06	; 6
     2f2:	f1 e0       	ldi	r31, 0x01	; 1
     2f4:	de 01       	movw	r26, r28
     2f6:	11 96       	adiw	r26, 0x01	; 1
     2f8:	01 90       	ld	r0, Z+
     2fa:	0d 92       	st	X+, r0
     2fc:	2a 95       	dec	r18
     2fe:	e1 f7       	brne	.-8      	; 0x2f8 <mmc_write_sector+0x24>
	
	/*Die Adressierung der MMC/SD-Karte wird in Bytes angegeben,
	  addr wird von Blocks zu Bytes umgerechnet danach werden 
	  diese in das Commando eingefügt*/
	  
	addr = addr << 9; //addr = addr * 512
     300:	dc 01       	movw	r26, r24
     302:	cb 01       	movw	r24, r22
     304:	29 e0       	ldi	r18, 0x09	; 9
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	aa 1f       	adc	r26, r26
     30c:	bb 1f       	adc	r27, r27
     30e:	2a 95       	dec	r18
     310:	d1 f7       	brne	.-12     	; 0x306 <mmc_write_sector+0x32>
	
	cmd[1] = ((addr & 0xFF000000) >>24 );
     312:	ba 83       	std	Y+2, r27	; 0x02
	cmd[2] = ((addr & 0x00FF0000) >>16 );
     314:	ab 83       	std	Y+3, r26	; 0x03
	cmd[3] = ((addr & 0x0000FF00) >>8 );
     316:	9c 83       	std	Y+4, r25	; 0x04

	//Sendet Commando cmd24 an MMC/SD-Karte (Write 1 Block/512 Bytes)
	tmp = mmc_write_command (cmd);
     318:	ce 01       	movw	r24, r28
     31a:	01 96       	adiw	r24, 0x01	; 1
     31c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <mmc_write_command>
     320:	f8 2e       	mov	r15, r24
	if (tmp != 0)
     322:	81 11       	cpse	r24, r1
     324:	25 c0       	rjmp	.+74     	; 0x370 <mmc_write_sector+0x9c>
     326:	84 e6       	ldi	r24, 0x64	; 100
     328:	f8 2e       	mov	r15, r24
		}
			
	//Wartet einen Moment und sendet einen Clock an die MMC/SD-Karte
	for (unsigned char a=0;a<100;a++)
		{
		mmc_read_byte();
     32a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
     32e:	fa 94       	dec	r15
	for (unsigned char a=0;a<100;a++)
     330:	f1 10       	cpse	r15, r1
     332:	fb cf       	rjmp	.-10     	; 0x32a <mmc_write_sector+0x56>
		}
	
	//Sendet Start Byte an MMC/SD-Karte
	mmc_write_byte(0xFE);	
     334:	8e ef       	ldi	r24, 0xFE	; 254
     336:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
     33a:	68 01       	movw	r12, r16
     33c:	8e ef       	ldi	r24, 0xFE	; 254
     33e:	d8 1a       	sub	r13, r24
	
	//Schreiben des Bolcks (512Bytes) auf MMC/SD-Karte
	for (unsigned int a=0;a<512;a++)
		{
		mmc_write_byte(*Buffer++);
     340:	f8 01       	movw	r30, r16
     342:	81 91       	ld	r24, Z+
     344:	8f 01       	movw	r16, r30
     346:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
	for (unsigned int a=0;a<512;a++)
     34a:	c0 16       	cp	r12, r16
     34c:	d1 06       	cpc	r13, r17
     34e:	c1 f7       	brne	.-16     	; 0x340 <mmc_write_sector+0x6c>
		}
	
	//CRC-Byte schreiben
	mmc_write_byte(0xFF); //Schreibt Dummy CRC
     350:	8f ef       	ldi	r24, 0xFF	; 255
     352:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
	mmc_write_byte(0xFF); //CRC Code wird nicht benutzt
     356:	8f ef       	ldi	r24, 0xFF	; 255
     358:	0e 94 ee 00 	call	0x1dc	; 0x1dc <mmc_write_byte>
	
	//Fehler beim schreiben? (Data Response XXX00101 = OK)
	if((mmc_read_byte()&0x1F) != 0x05) return(1);
     35c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
     360:	8f 71       	andi	r24, 0x1F	; 31
     362:	85 30       	cpi	r24, 0x05	; 5
     364:	a1 f4       	brne	.+40     	; 0x38e <mmc_write_sector+0xba>

	//Wartet auf MMC/SD-Karte Bussy
	while (mmc_read_byte() != 0xff){};
     366:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
     36a:	8f 3f       	cpi	r24, 0xFF	; 255
     36c:	e1 f7       	brne	.-8      	; 0x366 <mmc_write_sector+0x92>
	
	//set MMC_Chip_Select to high (MMC/SD-Karte Inaktiv)
	MMC_Disable();
     36e:	2e 9a       	sbi	0x05, 6	; 5
	
return(0);
}
     370:	8f 2d       	mov	r24, r15
     372:	26 96       	adiw	r28, 0x06	; 6
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	f8 94       	cli
     378:	de bf       	out	0x3e, r29	; 62
     37a:	0f be       	out	0x3f, r0	; 63
     37c:	cd bf       	out	0x3d, r28	; 61
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	1f 91       	pop	r17
     384:	0f 91       	pop	r16
     386:	ff 90       	pop	r15
     388:	df 90       	pop	r13
     38a:	cf 90       	pop	r12
     38c:	08 95       	ret
	if((mmc_read_byte()&0x1F) != 0x05) return(1);
     38e:	ff 24       	eor	r15, r15
     390:	f3 94       	inc	r15
     392:	ee cf       	rjmp	.-36     	; 0x370 <mmc_write_sector+0x9c>

00000394 <mmc_read_block>:

//############################################################################
//Routine zum lesen des CID Registers von der MMC/SD-Karte (16Bytes)
void mmc_read_block(unsigned char *cmd,unsigned char *Buffer,unsigned int Bytes)
//############################################################################
{	
     394:	0f 93       	push	r16
     396:	1f 93       	push	r17
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	eb 01       	movw	r28, r22
     39e:	8a 01       	movw	r16, r20
	//Sendet Commando cmd an MMC/SD-Karte
	if (mmc_write_command (cmd) != 0)
     3a0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <mmc_write_command>
     3a4:	81 11       	cpse	r24, r1
     3a6:	0e c0       	rjmp	.+28     	; 0x3c4 <mmc_read_block+0x30>
			 return;
			}

	//Wartet auf Start Byte von der MMC/SD-Karte (FEh/Start Byte)
	
	while (mmc_read_byte() != 0xfe){};
     3a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
     3ac:	8e 3f       	cpi	r24, 0xFE	; 254
     3ae:	e1 f7       	brne	.-8      	; 0x3a8 <mmc_read_block+0x14>
     3b0:	0c 0f       	add	r16, r28
     3b2:	1d 1f       	adc	r17, r29

	//Lesen des Bolcks (normal 512Bytes) von MMC/SD-Karte
	for (unsigned int a=0;a<Bytes;a++)
     3b4:	0c 17       	cp	r16, r28
     3b6:	1d 07       	cpc	r17, r29
     3b8:	51 f4       	brne	.+20     	; 0x3ce <mmc_read_block+0x3a>
		{
		*Buffer++ = mmc_read_byte();
		}
	//CRC-Byte auslesen
	mmc_read_byte();//CRC - Byte wird nicht ausgewertet
     3ba:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
	mmc_read_byte();//CRC - Byte wird nicht ausgewertet
     3be:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
	
	//set MMC_Chip_Select to high (MMC/SD-Karte Inaktiv)
	MMC_Disable();
     3c2:	2e 9a       	sbi	0x05, 6	; 5
	
	return;
}
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	08 95       	ret
		*Buffer++ = mmc_read_byte();
     3ce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <mmc_read_byte>
     3d2:	89 93       	st	Y+, r24
     3d4:	ef cf       	rjmp	.-34     	; 0x3b4 <mmc_read_block+0x20>

000003d6 <mmc_read_sector>:

//############################################################################
//Routine zum lesen eines Blocks(512Byte) von der MMC/SD-Karte
unsigned char mmc_read_sector (unsigned long addr,unsigned char *Buffer)
//############################################################################
{	
     3d6:	0f 93       	push	r16
     3d8:	1f 93       	push	r17
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	00 d0       	rcall	.+0      	; 0x3e0 <mmc_read_sector+0xa>
     3e0:	00 d0       	rcall	.+0      	; 0x3e2 <mmc_read_sector+0xc>
     3e2:	00 d0       	rcall	.+0      	; 0x3e4 <mmc_read_sector+0xe>
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
     3e8:	8a 01       	movw	r16, r20
	//Commando 16 zum lesen eines Blocks von der MMC/SD - Karte
	unsigned char cmd[] = {0x51,0x00,0x00,0x00,0x00,0xFF}; 
     3ea:	26 e0       	ldi	r18, 0x06	; 6
     3ec:	ec e0       	ldi	r30, 0x0C	; 12
     3ee:	f1 e0       	ldi	r31, 0x01	; 1
     3f0:	de 01       	movw	r26, r28
     3f2:	11 96       	adiw	r26, 0x01	; 1
     3f4:	01 90       	ld	r0, Z+
     3f6:	0d 92       	st	X+, r0
     3f8:	2a 95       	dec	r18
     3fa:	e1 f7       	brne	.-8      	; 0x3f4 <mmc_read_sector+0x1e>
	
	/*Die Adressierung der MMC/SD-Karte wird in Bytes angegeben,
	  addr wird von Blocks zu Bytes umgerechnet danach werden 
	  diese in das Commando eingefügt*/
	  
	addr = addr << 9; //addr = addr * 512
     3fc:	dc 01       	movw	r26, r24
     3fe:	cb 01       	movw	r24, r22
     400:	29 e0       	ldi	r18, 0x09	; 9
     402:	88 0f       	add	r24, r24
     404:	99 1f       	adc	r25, r25
     406:	aa 1f       	adc	r26, r26
     408:	bb 1f       	adc	r27, r27
     40a:	2a 95       	dec	r18
     40c:	d1 f7       	brne	.-12     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>

	cmd[1] = ((addr & 0xFF000000) >>24 );
     40e:	ba 83       	std	Y+2, r27	; 0x02
	cmd[2] = ((addr & 0x00FF0000) >>16 );
     410:	ab 83       	std	Y+3, r26	; 0x03
	cmd[3] = ((addr & 0x0000FF00) >>8 );
     412:	9c 83       	std	Y+4, r25	; 0x04

    mmc_read_block(cmd,Buffer,512);
     414:	40 e0       	ldi	r20, 0x00	; 0
     416:	52 e0       	ldi	r21, 0x02	; 2
     418:	b8 01       	movw	r22, r16
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	0e 94 ca 01 	call	0x394	; 0x394 <mmc_read_block>

	return(0);
}
     422:	80 e0       	ldi	r24, 0x00	; 0
     424:	26 96       	adiw	r28, 0x06	; 6
     426:	0f b6       	in	r0, 0x3f	; 63
     428:	f8 94       	cli
     42a:	de bf       	out	0x3e, r29	; 62
     42c:	0f be       	out	0x3f, r0	; 63
     42e:	cd bf       	out	0x3d, r28	; 61
     430:	df 91       	pop	r29
     432:	cf 91       	pop	r28
     434:	1f 91       	pop	r17
     436:	0f 91       	pop	r16
     438:	08 95       	ret

0000043a <mmc_read_cid>:

//############################################################################
//Routine zum lesen des CID Registers von der MMC/SD-Karte (16Bytes)
unsigned char mmc_read_cid (unsigned char *Buffer)
//############################################################################
{
     43a:	cf 93       	push	r28
     43c:	df 93       	push	r29
     43e:	00 d0       	rcall	.+0      	; 0x440 <mmc_read_cid+0x6>
     440:	00 d0       	rcall	.+0      	; 0x442 <mmc_read_cid+0x8>
     442:	00 d0       	rcall	.+0      	; 0x444 <mmc_read_cid+0xa>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	bc 01       	movw	r22, r24
	//Commando zum lesen des CID Registers
	unsigned char cmd[] = {0x4A,0x00,0x00,0x00,0x00,0xFF}; 
     44a:	96 e0       	ldi	r25, 0x06	; 6
     44c:	e2 e1       	ldi	r30, 0x12	; 18
     44e:	f1 e0       	ldi	r31, 0x01	; 1
     450:	de 01       	movw	r26, r28
     452:	11 96       	adiw	r26, 0x01	; 1
     454:	01 90       	ld	r0, Z+
     456:	0d 92       	st	X+, r0
     458:	9a 95       	dec	r25
     45a:	e1 f7       	brne	.-8      	; 0x454 <mmc_read_cid+0x1a>
	
	mmc_read_block(cmd,Buffer,16);
     45c:	40 e1       	ldi	r20, 0x10	; 16
     45e:	50 e0       	ldi	r21, 0x00	; 0
     460:	ce 01       	movw	r24, r28
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	0e 94 ca 01 	call	0x394	; 0x394 <mmc_read_block>

	return(0);
}
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	26 96       	adiw	r28, 0x06	; 6
     46c:	0f b6       	in	r0, 0x3f	; 63
     46e:	f8 94       	cli
     470:	de bf       	out	0x3e, r29	; 62
     472:	0f be       	out	0x3f, r0	; 63
     474:	cd bf       	out	0x3d, r28	; 61
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <mmc_read_csd>:

//############################################################################
//Routine zum lesen des CSD Registers von der MMC/SD-Karte (16Bytes)
unsigned char mmc_read_csd (unsigned char *Buffer)
//############################################################################
{	
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	00 d0       	rcall	.+0      	; 0x482 <mmc_read_csd+0x6>
     482:	00 d0       	rcall	.+0      	; 0x484 <mmc_read_csd+0x8>
     484:	00 d0       	rcall	.+0      	; 0x486 <mmc_read_csd+0xa>
     486:	cd b7       	in	r28, 0x3d	; 61
     488:	de b7       	in	r29, 0x3e	; 62
     48a:	bc 01       	movw	r22, r24
	//Commando zum lesen des CSD Registers
	unsigned char cmd[] = {0x49,0x00,0x00,0x00,0x00,0xFF};
     48c:	96 e0       	ldi	r25, 0x06	; 6
     48e:	e8 e1       	ldi	r30, 0x18	; 24
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	de 01       	movw	r26, r28
     494:	11 96       	adiw	r26, 0x01	; 1
     496:	01 90       	ld	r0, Z+
     498:	0d 92       	st	X+, r0
     49a:	9a 95       	dec	r25
     49c:	e1 f7       	brne	.-8      	; 0x496 <mmc_read_csd+0x1a>
	
	mmc_read_block(cmd,Buffer,16);
     49e:	40 e1       	ldi	r20, 0x10	; 16
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	0e 94 ca 01 	call	0x394	; 0x394 <mmc_read_block>

	return(0);
}
     4aa:	80 e0       	ldi	r24, 0x00	; 0
     4ac:	26 96       	adiw	r28, 0x06	; 6
     4ae:	0f b6       	in	r0, 0x3f	; 63
     4b0:	f8 94       	cli
     4b2:	de bf       	out	0x3e, r29	; 62
     4b4:	0f be       	out	0x3f, r0	; 63
     4b6:	cd bf       	out	0x3d, r28	; 61
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret

000004be <fat_root_dir_addr>:

//############################################################################
//Auslesen der Adresse des First Root Directory von Volume Boot Record
unsigned int fat_root_dir_addr (unsigned char *Buffer) 
//############################################################################
{
     4be:	cf 93       	push	r28
     4c0:	df 93       	push	r29
     4c2:	ec 01       	movw	r28, r24
	struct BootSec *bootp; //Zeiger auf Bootsektor Struktur
	unsigned int FirstRootDirSecNum;
	//auslesen des Volume Boot Record von der MMC/SD Karte 
	mmc_read_sector (volume_boot_record_addr,Buffer);
     4c4:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <__data_end>
     4c8:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <__data_end+0x1>
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	ae 01       	movw	r20, r28
     4d2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
	bootp=(struct BootSec *)Buffer;

	//berechnet den ersten Sector des Root Directory
	FirstRootDirSecNum = ( bootp->BPB_RsvdSecCnt +
	                       (bootp->BPB_NumFATs * bootp->BPB_FATSz16));
     4d6:	28 89       	ldd	r18, Y+16	; 0x10
     4d8:	8e 89       	ldd	r24, Y+22	; 0x16
     4da:	9f 89       	ldd	r25, Y+23	; 0x17
     4dc:	28 9f       	mul	r18, r24
     4de:	a0 01       	movw	r20, r0
     4e0:	29 9f       	mul	r18, r25
     4e2:	50 0d       	add	r21, r0
     4e4:	11 24       	eor	r1, r1

	FirstRootDirSecNum+= volume_boot_record_addr;
     4e6:	2e 85       	ldd	r18, Y+14	; 0x0e
     4e8:	3f 85       	ldd	r19, Y+15	; 0x0f
     4ea:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <__data_end>
     4ee:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <__data_end+0x1>
     4f2:	82 0f       	add	r24, r18
     4f4:	93 1f       	adc	r25, r19
	
	return(FirstRootDirSecNum);
}
     4f6:	84 0f       	add	r24, r20
     4f8:	95 1f       	adc	r25, r21
     4fa:	df 91       	pop	r29
     4fc:	cf 91       	pop	r28
     4fe:	08 95       	ret

00000500 <fat_init>:
{
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
     504:	cd b7       	in	r28, 0x3d	; 61
     506:	de b7       	in	r29, 0x3e	; 62
     508:	d2 50       	subi	r29, 0x02	; 2
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
   	mmc_read_sector (MASTER_BOOT_RECORD,Buffer); //Read Master Boot Record 
     514:	ae 01       	movw	r20, r28
     516:	4f 5f       	subi	r20, 0xFF	; 255
     518:	5f 4f       	sbci	r21, 0xFF	; 255
     51a:	60 e0       	ldi	r22, 0x00	; 0
     51c:	70 e0       	ldi	r23, 0x00	; 0
     51e:	cb 01       	movw	r24, r22
     520:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
    if (Buffer[510] == 0x55 && Buffer[511] == 0xAA)
     524:	c1 50       	subi	r28, 0x01	; 1
     526:	de 4f       	sbci	r29, 0xFE	; 254
     528:	88 81       	ld	r24, Y
     52a:	cf 5f       	subi	r28, 0xFF	; 255
     52c:	d1 40       	sbci	r29, 0x01	; 1
     52e:	85 35       	cpi	r24, 0x55	; 85
     530:	09 f0       	breq	.+2      	; 0x534 <fat_init+0x34>
     532:	45 c0       	rjmp	.+138    	; 0x5be <fat_init+0xbe>
     534:	c0 50       	subi	r28, 0x00	; 0
     536:	de 4f       	sbci	r29, 0xFE	; 254
     538:	88 81       	ld	r24, Y
     53a:	c0 50       	subi	r28, 0x00	; 0
     53c:	d2 40       	sbci	r29, 0x02	; 2
     53e:	8a 3a       	cpi	r24, 0xAA	; 170
     540:	f1 f5       	brne	.+124    	; 0x5be <fat_init+0xbe>
       FAT_DEBUG("\r\nMBR Signatur found!\r\n"); 
     542:	88 e7       	ldi	r24, 0x78	; 120
     544:	91 e0       	ldi	r25, 0x01	; 1
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
    volume_boot_record_addr = Buffer[VBR_ADDR] + (Buffer[VBR_ADDR+1] << 8);
     54e:	c8 53       	subi	r28, 0x38	; 56
     550:	de 4f       	sbci	r29, 0xFE	; 254
     552:	68 81       	ld	r22, Y
     554:	c8 5c       	subi	r28, 0xC8	; 200
     556:	d1 40       	sbci	r29, 0x01	; 1
     558:	86 2f       	mov	r24, r22
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	98 2f       	mov	r25, r24
     55e:	88 27       	eor	r24, r24
     560:	c9 53       	subi	r28, 0x39	; 57
     562:	de 4f       	sbci	r29, 0xFE	; 254
     564:	68 81       	ld	r22, Y
     566:	c7 5c       	subi	r28, 0xC7	; 199
     568:	d1 40       	sbci	r29, 0x01	; 1
     56a:	68 0f       	add	r22, r24
     56c:	79 2f       	mov	r23, r25
     56e:	71 1d       	adc	r23, r1
     570:	70 93 27 01 	sts	0x0127, r23	; 0x800127 <__data_end+0x1>
     574:	60 93 26 01 	sts	0x0126, r22	; 0x800126 <__data_end>
	mmc_read_sector (volume_boot_record_addr,Buffer);
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	ae 01       	movw	r20, r28
     57e:	4f 5f       	subi	r20, 0xFF	; 255
     580:	5f 4f       	sbci	r21, 0xFF	; 255
     582:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
    if (Buffer[510] == 0x55 && Buffer[511] == 0xAA)
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	c1 50       	subi	r28, 0x01	; 1
     58c:	de 4f       	sbci	r29, 0xFE	; 254
     58e:	88 81       	ld	r24, Y
     590:	cf 5f       	subi	r28, 0xFF	; 255
     592:	d1 40       	sbci	r29, 0x01	; 1
     594:	85 35       	cpi	r24, 0x55	; 85
     596:	e1 f0       	breq	.+56     	; 0x5d0 <fat_init+0xd0>
       FAT_DEBUG("\r\nVBR Signatur not found!\r\n"); 
     598:	88 e2       	ldi	r24, 0x28	; 40
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	9f 93       	push	r25
     59e:	8f 93       	push	r24
     5a0:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
       volume_boot_record_addr = MASTER_BOOT_RECORD;//<- added by Hennie
     5a4:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <__data_end+0x1>
     5a8:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <__data_end>
       mmc_read_sector (MASTER_BOOT_RECORD,Buffer); //Read Master Boot Record 
     5ac:	ae 01       	movw	r20, r28
     5ae:	4f 5f       	subi	r20, 0xFF	; 255
     5b0:	5f 4f       	sbci	r21, 0xFF	; 255
     5b2:	60 e0       	ldi	r22, 0x00	; 0
     5b4:	70 e0       	ldi	r23, 0x00	; 0
     5b6:	cb 01       	movw	r24, r22
     5b8:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
     5bc:	16 c0       	rjmp	.+44     	; 0x5ea <fat_init+0xea>
       FAT_DEBUG("\r\nMBR Signatur not found!\r\n"); 
     5be:	8c e5       	ldi	r24, 0x5C	; 92
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	ff cf       	rjmp	.-2      	; 0x5ce <fat_init+0xce>
    if (Buffer[510] == 0x55 && Buffer[511] == 0xAA)
     5d0:	c0 50       	subi	r28, 0x00	; 0
     5d2:	de 4f       	sbci	r29, 0xFE	; 254
     5d4:	88 81       	ld	r24, Y
     5d6:	c0 50       	subi	r28, 0x00	; 0
     5d8:	d2 40       	sbci	r29, 0x02	; 2
     5da:	8a 3a       	cpi	r24, 0xAA	; 170
     5dc:	e9 f6       	brne	.-70     	; 0x598 <fat_init+0x98>
       FAT_DEBUG("\r\nVBR Signatur found!\r\n"); 
     5de:	84 e4       	ldi	r24, 0x44	; 68
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	9f 93       	push	r25
     5e4:	8f 93       	push	r24
     5e6:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
       mmc_read_sector (MASTER_BOOT_RECORD,Buffer); //Read Master Boot Record 
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
	cluster_size = bootp->BPB_SecPerClus;
     5ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     5f0:	80 93 2c 01 	sts	0x012C, r24	; 0x80012c <cluster_size>
	fat_offset = bootp->BPB_RsvdSecCnt;
     5f4:	8f 85       	ldd	r24, Y+15	; 0x0f
     5f6:	98 89       	ldd	r25, Y+16	; 0x10
     5f8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <fat_offset+0x1>
     5fc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <fat_offset>
	cluster_offset = ((bootp->BPB_BytesPerSec * 32)/BlockSize);	
     600:	8c 85       	ldd	r24, Y+12	; 0x0c
     602:	9d 85       	ldd	r25, Y+13	; 0x0d
     604:	25 e0       	ldi	r18, 0x05	; 5
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	2a 95       	dec	r18
     60c:	e1 f7       	brne	.-8      	; 0x606 <fat_init+0x106>
     60e:	89 2f       	mov	r24, r25
     610:	86 95       	lsr	r24
     612:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <cluster_offset>
     616:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <cluster_offset+0x1>
	cluster_offset += fat_root_dir_addr(Buffer);
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 5f 02 	call	0x4be	; 0x4be <fat_root_dir_addr>
     622:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <cluster_offset>
     626:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <cluster_offset+0x1>
     62a:	82 0f       	add	r24, r18
     62c:	93 1f       	adc	r25, r19
     62e:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <cluster_offset+0x1>
     632:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <cluster_offset>
}
     636:	de 5f       	subi	r29, 0xFE	; 254
     638:	0f b6       	in	r0, 0x3f	; 63
     63a:	f8 94       	cli
     63c:	de bf       	out	0x3e, r29	; 62
     63e:	0f be       	out	0x3f, r0	; 63
     640:	cd bf       	out	0x3d, r28	; 61
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	08 95       	ret

00000648 <fat_load>:
//	Cluster = Start Clusterangabe aus dem Directory	
void fat_load (	unsigned int Cluster, 		//Angabe Startcluster
				unsigned long *Block,
				unsigned char *TMP_Buffer) 	//Workingbuffer
//############################################################################
{
     648:	8f 92       	push	r8
     64a:	9f 92       	push	r9
     64c:	af 92       	push	r10
     64e:	bf 92       	push	r11
     650:	cf 92       	push	r12
     652:	df 92       	push	r13
     654:	ef 92       	push	r14
     656:	ff 92       	push	r15
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	6b 01       	movw	r12, r22
     662:	7a 01       	movw	r14, r20

	//FAT Block Adresse
	unsigned int FAT_Block_Addresse;
	
	//Berechnung für den ersten FAT Block (FAT Start Addresse)
	for (unsigned int a = 0;;a++)
     664:	10 e0       	ldi	r17, 0x00	; 0
     666:	00 e0       	ldi	r16, 0x00	; 0
	unsigned int FAT_Block_Store = 0;	
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	20 e0       	ldi	r18, 0x00	; 0
	{	
		if (a == *Block)
     66c:	a8 01       	movw	r20, r16
     66e:	70 e0       	ldi	r23, 0x00	; 0
     670:	60 e0       	ldi	r22, 0x00	; 0
     672:	f6 01       	movw	r30, r12
     674:	80 80       	ld	r8, Z
     676:	91 80       	ldd	r9, Z+1	; 0x01
     678:	a2 80       	ldd	r10, Z+2	; 0x02
     67a:	b3 80       	ldd	r11, Z+3	; 0x03
     67c:	48 15       	cp	r20, r8
     67e:	59 05       	cpc	r21, r9
     680:	6a 05       	cpc	r22, r10
     682:	7b 05       	cpc	r23, r11
     684:	99 f4       	brne	.+38     	; 0x6ac <fat_load+0x64>
			{
			*Block = (0x0000FFFF & Cluster);
     686:	b0 e0       	ldi	r27, 0x00	; 0
     688:	a0 e0       	ldi	r26, 0x00	; 0
     68a:	80 83       	st	Z, r24
     68c:	91 83       	std	Z+1, r25	; 0x01
     68e:	a2 83       	std	Z+2, r26	; 0x02
     690:	b3 83       	std	Z+3, r27	; 0x03
		//Lesen der nächsten Clusternummer
		Cluster = (TMP_Buffer[FAT_Byte_Addresse + 1] << 8) + 
					TMP_Buffer[FAT_Byte_Addresse];		
	}
	return;
}
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	1f 91       	pop	r17
     698:	0f 91       	pop	r16
     69a:	ff 90       	pop	r15
     69c:	ef 90       	pop	r14
     69e:	df 90       	pop	r13
     6a0:	cf 90       	pop	r12
     6a2:	bf 90       	pop	r11
     6a4:	af 90       	pop	r10
     6a6:	9f 90       	pop	r9
     6a8:	8f 90       	pop	r8
     6aa:	08 95       	ret
		if (Cluster == 0xFFFF)
     6ac:	8f 3f       	cpi	r24, 0xFF	; 255
     6ae:	98 07       	cpc	r25, r24
     6b0:	81 f3       	breq	.-32     	; 0x692 <fat_load+0x4a>
		FAT_Byte_Addresse = (Cluster*2) % BlockSize;
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	5c 01       	movw	r10, r24
     6b8:	e8 94       	clt
     6ba:	a0 f8       	bld	r10, 0
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	b4 22       	and	r11, r20
		FAT_Block_Addresse = ((Cluster*2) / BlockSize) + 
     6c0:	c0 91 26 01 	lds	r28, 0x0126	; 0x800126 <__data_end>
     6c4:	d0 91 27 01 	lds	r29, 0x0127	; 0x800127 <__data_end+0x1>
     6c8:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <fat_offset>
     6cc:	50 91 29 01 	lds	r21, 0x0129	; 0x800129 <fat_offset+0x1>
     6d0:	c4 0f       	add	r28, r20
     6d2:	d5 1f       	adc	r29, r21
     6d4:	89 2f       	mov	r24, r25
     6d6:	99 27       	eor	r25, r25
     6d8:	86 95       	lsr	r24
     6da:	c8 0f       	add	r28, r24
     6dc:	d9 1f       	adc	r29, r25
		if (FAT_Block_Addresse != FAT_Block_Store)
     6de:	2c 17       	cp	r18, r28
     6e0:	3d 07       	cpc	r19, r29
     6e2:	31 f0       	breq	.+12     	; 0x6f0 <fat_load+0xa8>
			mmc_read_sector (FAT_Block_Addresse,TMP_Buffer);	
     6e4:	be 01       	movw	r22, r28
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	a7 01       	movw	r20, r14
     6ec:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
		Cluster = (TMP_Buffer[FAT_Byte_Addresse + 1] << 8) + 
     6f0:	f7 01       	movw	r30, r14
     6f2:	ea 0d       	add	r30, r10
     6f4:	fb 1d       	adc	r31, r11
     6f6:	81 81       	ldd	r24, Z+1	; 0x01
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	98 2f       	mov	r25, r24
     6fc:	88 27       	eor	r24, r24
					TMP_Buffer[FAT_Byte_Addresse];		
     6fe:	20 81       	ld	r18, Z
		Cluster = (TMP_Buffer[FAT_Byte_Addresse + 1] << 8) + 
     700:	82 0f       	add	r24, r18
     702:	91 1d       	adc	r25, r1
	for (unsigned int a = 0;;a++)
     704:	0f 5f       	subi	r16, 0xFF	; 255
     706:	1f 4f       	sbci	r17, 0xFF	; 255
		FAT_Block_Addresse = ((Cluster*2) / BlockSize) + 
     708:	9e 01       	movw	r18, r28
		if (a == *Block)
     70a:	b0 cf       	rjmp	.-160    	; 0x66c <fat_load+0x24>

0000070c <fat_read_dir_ent>:
{
     70c:	2f 92       	push	r2
     70e:	3f 92       	push	r3
     710:	4f 92       	push	r4
     712:	5f 92       	push	r5
     714:	6f 92       	push	r6
     716:	7f 92       	push	r7
     718:	8f 92       	push	r8
     71a:	9f 92       	push	r9
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ef 92       	push	r14
     726:	ff 92       	push	r15
     728:	0f 93       	push	r16
     72a:	1f 93       	push	r17
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	00 d0       	rcall	.+0      	; 0x732 <fat_read_dir_ent+0x26>
     732:	00 d0       	rcall	.+0      	; 0x734 <fat_read_dir_ent+0x28>
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	66 2e       	mov	r6, r22
     73a:	5a 01       	movw	r10, r20
     73c:	49 01       	movw	r8, r18
	unsigned long Block = 0;
     73e:	19 82       	std	Y+1, r1	; 0x01
     740:	1a 82       	std	Y+2, r1	; 0x02
     742:	1b 82       	std	Y+3, r1	; 0x03
     744:	1c 82       	std	Y+4, r1	; 0x04
	if (dir_cluster == 0)
     746:	00 97       	sbiw	r24, 0x00	; 0
     748:	09 f0       	breq	.+2      	; 0x74c <fat_read_dir_ent+0x40>
     74a:	6b c0       	rjmp	.+214    	; 0x822 <fat_read_dir_ent+0x116>
		Block = fat_root_dir_addr(Buffer);
     74c:	c8 01       	movw	r24, r16
     74e:	0e 94 5f 02 	call	0x4be	; 0x4be <fat_root_dir_addr>
     752:	b0 e0       	ldi	r27, 0x00	; 0
     754:	a0 e0       	ldi	r26, 0x00	; 0
     756:	89 83       	std	Y+1, r24	; 0x01
     758:	9a 83       	std	Y+2, r25	; 0x02
     75a:	ab 83       	std	Y+3, r26	; 0x03
     75c:	bc 83       	std	Y+4, r27	; 0x04
	for (unsigned int blk = Block;;blk++)
     75e:	e9 80       	ldd	r14, Y+1	; 0x01
     760:	fa 80       	ldd	r15, Y+2	; 0x02
	unsigned int TMP_Entry_Count = 0;
     762:	d1 2c       	mov	r13, r1
     764:	c1 2c       	mov	r12, r1
     766:	28 01       	movw	r4, r16
     768:	8e ef       	ldi	r24, 0xFE	; 254
     76a:	58 1a       	sub	r5, r24
				if (TMP_Entry_Count == Entry_Count) 
     76c:	71 2c       	mov	r7, r1
		mmc_read_sector (blk,Buffer);	//Lesen eines Blocks des Root Directory
     76e:	b7 01       	movw	r22, r14
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	a8 01       	movw	r20, r16
     776:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
     77a:	f8 01       	movw	r30, r16
		 dir=(struct DirEntry *)&Buffer[a]; //Zeiger auf aktuellen Verzeichniseintrag holen
     77c:	1f 01       	movw	r2, r30
			if (dir->DIR_Name[0] == 0) //Kein weiterer Eintrag wenn erstes Zeichen des Namens 0 ist
     77e:	80 81       	ld	r24, Z
     780:	88 23       	and	r24, r24
     782:	09 f4       	brne	.+2      	; 0x786 <fat_read_dir_ent+0x7a>
     784:	7a c0       	rjmp	.+244    	; 0x87a <fat_read_dir_ent+0x16e>
   			if ((dir->DIR_Attr != ATTR_LONG_NAME) &&
     786:	93 85       	ldd	r25, Z+11	; 0x0b
     788:	9f 30       	cpi	r25, 0x0F	; 15
     78a:	09 f4       	brne	.+2      	; 0x78e <fat_read_dir_ent+0x82>
     78c:	6d c0       	rjmp	.+218    	; 0x868 <fat_read_dir_ent+0x15c>
     78e:	85 3e       	cpi	r24, 0xE5	; 229
     790:	09 f4       	brne	.+2      	; 0x794 <fat_read_dir_ent+0x88>
     792:	6a c0       	rjmp	.+212    	; 0x868 <fat_read_dir_ent+0x15c>
				if (TMP_Entry_Count == Entry_Count) 
     794:	6c 14       	cp	r6, r12
     796:	7d 04       	cpc	r7, r13
     798:	09 f0       	breq	.+2      	; 0x79c <fat_read_dir_ent+0x90>
     79a:	63 c0       	rjmp	.+198    	; 0x862 <fat_read_dir_ent+0x156>
					for(unsigned char b=0;b<11;b++)
     79c:	80 e0       	ldi	r24, 0x00	; 0
							*pointer++= '.';
     79e:	9e e2       	ldi	r25, 0x2E	; 46
					if (dir->DIR_Name[b] != SPACE)
     7a0:	21 91       	ld	r18, Z+
     7a2:	20 32       	cpi	r18, 0x20	; 32
     7a4:	69 f0       	breq	.+26     	; 0x7c0 <fat_read_dir_ent+0xb4>
						if (b == 8)
     7a6:	88 30       	cpi	r24, 0x08	; 8
     7a8:	19 f4       	brne	.+6      	; 0x7b0 <fat_read_dir_ent+0xa4>
							*pointer++= '.';
     7aa:	d8 01       	movw	r26, r16
     7ac:	9d 93       	st	X+, r25
     7ae:	8d 01       	movw	r16, r26
						*pointer++=dir->DIR_Name[b];
     7b0:	9f 01       	movw	r18, r30
     7b2:	21 50       	subi	r18, 0x01	; 1
     7b4:	31 09       	sbc	r19, r1
     7b6:	d9 01       	movw	r26, r18
     7b8:	2c 91       	ld	r18, X
     7ba:	d8 01       	movw	r26, r16
     7bc:	2d 93       	st	X+, r18
     7be:	8d 01       	movw	r16, r26
					for(unsigned char b=0;b<11;b++)
     7c0:	8f 5f       	subi	r24, 0xFF	; 255
     7c2:	8b 30       	cpi	r24, 0x0B	; 11
     7c4:	69 f7       	brne	.-38     	; 0x7a0 <fat_read_dir_ent+0x94>
					*pointer++='\0';
     7c6:	f8 01       	movw	r30, r16
     7c8:	10 82       	st	Z, r1
					*Dir_Attrib = dir->DIR_Attr;
     7ca:	d1 01       	movw	r26, r2
     7cc:	1b 96       	adiw	r26, 0x0b	; 11
     7ce:	8c 91       	ld	r24, X
     7d0:	1b 97       	sbiw	r26, 0x0b	; 11
     7d2:	f4 01       	movw	r30, r8
     7d4:	80 83       	st	Z, r24
					*Size=dir->DIR_FileSize;
     7d6:	5c 96       	adiw	r26, 0x1c	; 28
     7d8:	4d 91       	ld	r20, X+
     7da:	5d 91       	ld	r21, X+
     7dc:	6d 91       	ld	r22, X+
     7de:	7c 91       	ld	r23, X
     7e0:	5f 97       	sbiw	r26, 0x1f	; 31
     7e2:	d5 01       	movw	r26, r10
     7e4:	4d 93       	st	X+, r20
     7e6:	5d 93       	st	X+, r21
     7e8:	6d 93       	st	X+, r22
     7ea:	7c 93       	st	X, r23
     7ec:	13 97       	sbiw	r26, 0x03	; 3
					dir_cluster = dir->DIR_FstClusLO;
     7ee:	f1 01       	movw	r30, r2
     7f0:	82 8d       	ldd	r24, Z+26	; 0x1a
     7f2:	93 8d       	ldd	r25, Z+27	; 0x1b
}
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	ff 90       	pop	r15
     806:	ef 90       	pop	r14
     808:	df 90       	pop	r13
     80a:	cf 90       	pop	r12
     80c:	bf 90       	pop	r11
     80e:	af 90       	pop	r10
     810:	9f 90       	pop	r9
     812:	8f 90       	pop	r8
     814:	7f 90       	pop	r7
     816:	6f 90       	pop	r6
     818:	5f 90       	pop	r5
     81a:	4f 90       	pop	r4
     81c:	3f 90       	pop	r3
     81e:	2f 90       	pop	r2
     820:	08 95       	ret
		fat_load (dir_cluster,&Block,Buffer);			 
     822:	a8 01       	movw	r20, r16
     824:	be 01       	movw	r22, r28
     826:	6f 5f       	subi	r22, 0xFF	; 255
     828:	7f 4f       	sbci	r23, 0xFF	; 255
     82a:	0e 94 24 03 	call	0x648	; 0x648 <fat_load>
		Block = ((Block-2) * cluster_size) + cluster_offset;
     82e:	29 81       	ldd	r18, Y+1	; 0x01
     830:	3a 81       	ldd	r19, Y+2	; 0x02
     832:	4b 81       	ldd	r20, Y+3	; 0x03
     834:	5c 81       	ldd	r21, Y+4	; 0x04
     836:	22 50       	subi	r18, 0x02	; 2
     838:	31 09       	sbc	r19, r1
     83a:	41 09       	sbc	r20, r1
     83c:	51 09       	sbc	r21, r1
     83e:	a0 91 2c 01 	lds	r26, 0x012C	; 0x80012c <cluster_size>
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	0e 94 94 07 	call	0xf28	; 0xf28 <__muluhisi3>
     848:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <cluster_offset>
     84c:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <cluster_offset+0x1>
     850:	62 0f       	add	r22, r18
     852:	73 1f       	adc	r23, r19
     854:	81 1d       	adc	r24, r1
     856:	91 1d       	adc	r25, r1
     858:	69 83       	std	Y+1, r22	; 0x01
     85a:	7a 83       	std	Y+2, r23	; 0x02
     85c:	8b 83       	std	Y+3, r24	; 0x03
     85e:	9c 83       	std	Y+4, r25	; 0x04
     860:	7e cf       	rjmp	.-260    	; 0x75e <fat_read_dir_ent+0x52>
			TMP_Entry_Count++;
     862:	8f ef       	ldi	r24, 0xFF	; 255
     864:	c8 1a       	sub	r12, r24
     866:	d8 0a       	sbc	r13, r24
     868:	b0 96       	adiw	r30, 0x20	; 32
		for (unsigned int a=0;a<BlockSize; a = a + 32)
     86a:	4e 16       	cp	r4, r30
     86c:	5f 06       	cpc	r5, r31
     86e:	09 f0       	breq	.+2      	; 0x872 <fat_read_dir_ent+0x166>
     870:	85 cf       	rjmp	.-246    	; 0x77c <fat_read_dir_ent+0x70>
	for (unsigned int blk = Block;;blk++)
     872:	af ef       	ldi	r26, 0xFF	; 255
     874:	ea 1a       	sub	r14, r26
     876:	fa 0a       	sbc	r15, r26
		mmc_read_sector (blk,Buffer);	//Lesen eines Blocks des Root Directory
     878:	7a cf       	rjmp	.-268    	; 0x76e <fat_read_dir_ent+0x62>
			return (0xFFFF);
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	9f ef       	ldi	r25, 0xFF	; 255
     87e:	ba cf       	rjmp	.-140    	; 0x7f4 <fat_read_dir_ent+0xe8>

00000880 <fat_read_file>:
void fat_read_file (unsigned int Cluster,//Angabe des Startclusters vom File
				 unsigned char *Buffer,	  //Workingbuffer
				 unsigned long BlockCount)	  //Angabe welcher Bock vom File geladen 
										      //werden soll a 512 Bytes
//############################################################################
{
     880:	4f 92       	push	r4
     882:	5f 92       	push	r5
     884:	6f 92       	push	r6
     886:	7f 92       	push	r7
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	00 d0       	rcall	.+0      	; 0x8a2 <fat_read_file+0x22>
     8a2:	00 d0       	rcall	.+0      	; 0x8a4 <fat_read_file+0x24>
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	7c 01       	movw	r14, r24
     8aa:	8b 01       	movw	r16, r22
     8ac:	29 01       	movw	r4, r18
     8ae:	3a 01       	movw	r6, r20
	//Berechnung des Blocks aus BlockCount und Cluster aus FATTabelle
	//Berechnung welcher Cluster zu laden ist
	
	unsigned long Block = (BlockCount/cluster_size);
     8b0:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <cluster_size>
     8b4:	30 e0       	ldi	r19, 0x00	; 0
     8b6:	50 e0       	ldi	r21, 0x00	; 0
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	c3 01       	movw	r24, r6
     8bc:	b2 01       	movw	r22, r4
     8be:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodsi4>
     8c2:	29 83       	std	Y+1, r18	; 0x01
     8c4:	3a 83       	std	Y+2, r19	; 0x02
     8c6:	4b 83       	std	Y+3, r20	; 0x03
     8c8:	5c 83       	std	Y+4, r21	; 0x04
	
	//Auslesen der FAT - Tabelle
	fat_load (Cluster,&Block,Buffer);			 
     8ca:	a8 01       	movw	r20, r16
     8cc:	be 01       	movw	r22, r28
     8ce:	6f 5f       	subi	r22, 0xFF	; 255
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	c7 01       	movw	r24, r14
     8d4:	0e 94 24 03 	call	0x648	; 0x648 <fat_load>
	Block = ((Block-2) * cluster_size) + cluster_offset;
     8d8:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <cluster_size>
     8dc:	91 2c       	mov	r9, r1
     8de:	b1 2c       	mov	r11, r1
     8e0:	a1 2c       	mov	r10, r1
     8e2:	29 81       	ldd	r18, Y+1	; 0x01
     8e4:	3a 81       	ldd	r19, Y+2	; 0x02
     8e6:	4b 81       	ldd	r20, Y+3	; 0x03
     8e8:	5c 81       	ldd	r21, Y+4	; 0x04
     8ea:	22 50       	subi	r18, 0x02	; 2
     8ec:	31 09       	sbc	r19, r1
     8ee:	41 09       	sbc	r20, r1
     8f0:	51 09       	sbc	r21, r1
     8f2:	c5 01       	movw	r24, r10
     8f4:	b4 01       	movw	r22, r8
     8f6:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsi3>
     8fa:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <cluster_offset>
     8fe:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <cluster_offset+0x1>
     902:	6b 01       	movw	r12, r22
     904:	7c 01       	movw	r14, r24
     906:	c2 0e       	add	r12, r18
     908:	d3 1e       	adc	r13, r19
     90a:	e1 1c       	adc	r14, r1
     90c:	f1 1c       	adc	r15, r1
	//Berechnung des Blocks innerhalb des Cluster
	Block += (BlockCount % cluster_size);
     90e:	c3 01       	movw	r24, r6
     910:	b2 01       	movw	r22, r4
     912:	a5 01       	movw	r20, r10
     914:	94 01       	movw	r18, r8
     916:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodsi4>
     91a:	6c 0d       	add	r22, r12
     91c:	7d 1d       	adc	r23, r13
     91e:	8e 1d       	adc	r24, r14
     920:	9f 1d       	adc	r25, r15
     922:	69 83       	std	Y+1, r22	; 0x01
     924:	7a 83       	std	Y+2, r23	; 0x02
     926:	8b 83       	std	Y+3, r24	; 0x03
     928:	9c 83       	std	Y+4, r25	; 0x04
	//Read Data Block from Device
	mmc_read_sector (Block,Buffer);	
     92a:	a8 01       	movw	r20, r16
     92c:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <mmc_read_sector>
	return;
}
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	1f 91       	pop	r17
     93e:	0f 91       	pop	r16
     940:	ff 90       	pop	r15
     942:	ef 90       	pop	r14
     944:	df 90       	pop	r13
     946:	cf 90       	pop	r12
     948:	bf 90       	pop	r11
     94a:	af 90       	pop	r10
     94c:	9f 90       	pop	r9
     94e:	8f 90       	pop	r8
     950:	7f 90       	pop	r7
     952:	6f 90       	pop	r6
     954:	5f 90       	pop	r5
     956:	4f 90       	pop	r4
     958:	08 95       	ret

0000095a <fat_write_file>:
void fat_write_file (unsigned int cluster,//Angabe des Startclusters vom File
					unsigned char *buffer,	  //Workingbuffer
					unsigned long blockCount)	  //Angabe welcher Bock vom File gespeichert 
									  //werden soll a 512 Bytes
//############################################################################
{
     95a:	4f 92       	push	r4
     95c:	5f 92       	push	r5
     95e:	6f 92       	push	r6
     960:	7f 92       	push	r7
     962:	8f 92       	push	r8
     964:	9f 92       	push	r9
     966:	af 92       	push	r10
     968:	bf 92       	push	r11
     96a:	cf 92       	push	r12
     96c:	df 92       	push	r13
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	c5 50       	subi	r28, 0x05	; 5
     980:	d2 40       	sbci	r29, 0x02	; 2
     982:	0f b6       	in	r0, 0x3f	; 63
     984:	f8 94       	cli
     986:	de bf       	out	0x3e, r29	; 62
     988:	0f be       	out	0x3f, r0	; 63
     98a:	cd bf       	out	0x3d, r28	; 61
     98c:	7c 01       	movw	r14, r24
     98e:	8b 01       	movw	r16, r22
     990:	29 01       	movw	r4, r18
     992:	3a 01       	movw	r6, r20
	//Berechnung des Blocks aus BlockCount und Cluster aus FATTabelle
	//Berechnung welcher Cluster zu speichern ist
	unsigned char tmp_buffer[513];	
	unsigned long block = (blockCount/cluster_size);
     994:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <cluster_size>
     998:	30 e0       	ldi	r19, 0x00	; 0
     99a:	50 e0       	ldi	r21, 0x00	; 0
     99c:	40 e0       	ldi	r20, 0x00	; 0
     99e:	c3 01       	movw	r24, r6
     9a0:	b2 01       	movw	r22, r4
     9a2:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodsi4>
     9a6:	ce 5f       	subi	r28, 0xFE	; 254
     9a8:	dd 4f       	sbci	r29, 0xFD	; 253
     9aa:	28 83       	st	Y, r18
     9ac:	39 83       	std	Y+1, r19	; 0x01
     9ae:	4a 83       	std	Y+2, r20	; 0x02
     9b0:	5b 83       	std	Y+3, r21	; 0x03
     9b2:	c2 50       	subi	r28, 0x02	; 2
     9b4:	d2 40       	sbci	r29, 0x02	; 2
	
	//Auslesen der FAT - Tabelle
	fat_load (cluster,&block,tmp_buffer);			 
     9b6:	ae 01       	movw	r20, r28
     9b8:	4f 5f       	subi	r20, 0xFF	; 255
     9ba:	5f 4f       	sbci	r21, 0xFF	; 255
     9bc:	be 01       	movw	r22, r28
     9be:	6e 5f       	subi	r22, 0xFE	; 254
     9c0:	7d 4f       	sbci	r23, 0xFD	; 253
     9c2:	c7 01       	movw	r24, r14
     9c4:	0e 94 24 03 	call	0x648	; 0x648 <fat_load>
	block = ((block-2) * cluster_size) + cluster_offset;
     9c8:	80 90 2c 01 	lds	r8, 0x012C	; 0x80012c <cluster_size>
     9cc:	91 2c       	mov	r9, r1
     9ce:	b1 2c       	mov	r11, r1
     9d0:	a1 2c       	mov	r10, r1
     9d2:	ce 5f       	subi	r28, 0xFE	; 254
     9d4:	dd 4f       	sbci	r29, 0xFD	; 253
     9d6:	28 81       	ld	r18, Y
     9d8:	39 81       	ldd	r19, Y+1	; 0x01
     9da:	4a 81       	ldd	r20, Y+2	; 0x02
     9dc:	5b 81       	ldd	r21, Y+3	; 0x03
     9de:	c2 50       	subi	r28, 0x02	; 2
     9e0:	d2 40       	sbci	r29, 0x02	; 2
     9e2:	22 50       	subi	r18, 0x02	; 2
     9e4:	31 09       	sbc	r19, r1
     9e6:	41 09       	sbc	r20, r1
     9e8:	51 09       	sbc	r21, r1
     9ea:	c5 01       	movw	r24, r10
     9ec:	b4 01       	movw	r22, r8
     9ee:	0e 94 62 07 	call	0xec4	; 0xec4 <__mulsi3>
     9f2:	20 91 2a 01 	lds	r18, 0x012A	; 0x80012a <cluster_offset>
     9f6:	30 91 2b 01 	lds	r19, 0x012B	; 0x80012b <cluster_offset+0x1>
     9fa:	6b 01       	movw	r12, r22
     9fc:	7c 01       	movw	r14, r24
     9fe:	c2 0e       	add	r12, r18
     a00:	d3 1e       	adc	r13, r19
     a02:	e1 1c       	adc	r14, r1
     a04:	f1 1c       	adc	r15, r1
	//Berechnung des Blocks innerhalb des Cluster
	block += (blockCount % cluster_size);
     a06:	c3 01       	movw	r24, r6
     a08:	b2 01       	movw	r22, r4
     a0a:	a5 01       	movw	r20, r10
     a0c:	94 01       	movw	r18, r8
     a0e:	0e 94 72 07 	call	0xee4	; 0xee4 <__udivmodsi4>
     a12:	6c 0d       	add	r22, r12
     a14:	7d 1d       	adc	r23, r13
     a16:	8e 1d       	adc	r24, r14
     a18:	9f 1d       	adc	r25, r15
     a1a:	ce 5f       	subi	r28, 0xFE	; 254
     a1c:	dd 4f       	sbci	r29, 0xFD	; 253
     a1e:	68 83       	st	Y, r22
     a20:	79 83       	std	Y+1, r23	; 0x01
     a22:	8a 83       	std	Y+2, r24	; 0x02
     a24:	9b 83       	std	Y+3, r25	; 0x03
     a26:	c2 50       	subi	r28, 0x02	; 2
     a28:	d2 40       	sbci	r29, 0x02	; 2
	//Write Data Block to Device
	mmc_write_sector (block,buffer);	
     a2a:	a8 01       	movw	r20, r16
     a2c:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <mmc_write_sector>
	return;
}
     a30:	cb 5f       	subi	r28, 0xFB	; 251
     a32:	dd 4f       	sbci	r29, 0xFD	; 253
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	ff 90       	pop	r15
     a48:	ef 90       	pop	r14
     a4a:	df 90       	pop	r13
     a4c:	cf 90       	pop	r12
     a4e:	bf 90       	pop	r11
     a50:	af 90       	pop	r10
     a52:	9f 90       	pop	r9
     a54:	8f 90       	pop	r8
     a56:	7f 90       	pop	r7
     a58:	6f 90       	pop	r6
     a5a:	5f 90       	pop	r5
     a5c:	4f 90       	pop	r4
     a5e:	08 95       	ret

00000a60 <fat_search_file>:
											//wurde
							unsigned long *Size, 		//Rückgabe der File Größe
							unsigned char *Dir_Attrib,//Rückgabe des Dir Attributs
							unsigned char *Buffer) 	//Working Buffer
//####################################################################################
{
     a60:	5f 92       	push	r5
     a62:	6f 92       	push	r6
     a64:	7f 92       	push	r7
     a66:	8f 92       	push	r8
     a68:	9f 92       	push	r9
     a6a:	af 92       	push	r10
     a6c:	bf 92       	push	r11
     a6e:	cf 92       	push	r12
     a70:	df 92       	push	r13
     a72:	ef 92       	push	r14
     a74:	ff 92       	push	r15
     a76:	0f 93       	push	r16
     a78:	1f 93       	push	r17
     a7a:	cf 93       	push	r28
     a7c:	df 93       	push	r29
     a7e:	6c 01       	movw	r12, r24
     a80:	eb 01       	movw	r28, r22
     a82:	5a 01       	movw	r10, r20
     a84:	49 01       	movw	r8, r18
     a86:	78 01       	movw	r14, r16
	unsigned int Dir_Cluster_Store = *Cluster;
     a88:	68 80       	ld	r6, Y
     a8a:	79 80       	ldd	r7, Y+1	; 0x01
	for (unsigned char a = 0;a < 100;a++)
     a8c:	51 2c       	mov	r5, r1
	{
		*Cluster = fat_read_dir_ent(Dir_Cluster_Store,a,Size,Dir_Attrib,Buffer);
     a8e:	87 01       	movw	r16, r14
     a90:	94 01       	movw	r18, r8
     a92:	a5 01       	movw	r20, r10
     a94:	65 2d       	mov	r22, r5
     a96:	c3 01       	movw	r24, r6
     a98:	0e 94 86 03 	call	0x70c	; 0x70c <fat_read_dir_ent>
     a9c:	99 83       	std	Y+1, r25	; 0x01
     a9e:	88 83       	st	Y, r24
		if (*Cluster == 0xffff)
     aa0:	01 96       	adiw	r24, 0x01	; 1
     aa2:	d9 f0       	breq	.+54     	; 0xada <fat_search_file+0x7a>
			{
			return(0); //File not Found
			}
		if(strcasecmp((char *)File_Name,(char *)Buffer) == 0)
     aa4:	b7 01       	movw	r22, r14
     aa6:	c6 01       	movw	r24, r12
     aa8:	0e 94 cc 07 	call	0xf98	; 0xf98 <strcasecmp>
     aac:	89 2b       	or	r24, r25
     aae:	b9 f0       	breq	.+46     	; 0xade <fat_search_file+0x7e>
	for (unsigned char a = 0;a < 100;a++)
     ab0:	53 94       	inc	r5
     ab2:	84 e6       	ldi	r24, 0x64	; 100
     ab4:	58 12       	cpse	r5, r24
     ab6:	eb cf       	rjmp	.-42     	; 0xa8e <fat_search_file+0x2e>
			{
			return(1); //File Found
			}
	}
	return(2); //Error
     ab8:	82 e0       	ldi	r24, 0x02	; 2
}
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	1f 91       	pop	r17
     ac0:	0f 91       	pop	r16
     ac2:	ff 90       	pop	r15
     ac4:	ef 90       	pop	r14
     ac6:	df 90       	pop	r13
     ac8:	cf 90       	pop	r12
     aca:	bf 90       	pop	r11
     acc:	af 90       	pop	r10
     ace:	9f 90       	pop	r9
     ad0:	8f 90       	pop	r8
     ad2:	7f 90       	pop	r7
     ad4:	6f 90       	pop	r6
     ad6:	5f 90       	pop	r5
     ad8:	08 95       	ret
			return(0); //File not Found
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	ee cf       	rjmp	.-36     	; 0xaba <fat_search_file+0x5a>
			return(1); //File Found
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	ec cf       	rjmp	.-40     	; 0xaba <fat_search_file+0x5a>

00000ae2 <usart_init>:
	//UCSRC = 0x06 + ((parity+1)<<4);
	//UCSRC |= (1<<USBS);
	//Teiler wird gesetzt 
	//UBRR=(F_CPU / (baudrate * 16L) - 1);
	//Konfiguration UART
  UCSR0B = (1<<RXEN0) | (1<<TXEN0) | (1<<RXCIE0);	//Turn on RX and TX circuits RXCIE0 enables Interrupt when byte received
     ae2:	88 e9       	ldi	r24, 0x98	; 152
     ae4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00);	//8-Bit Char size
     ae8:	86 e0       	ldi	r24, 0x06	; 6
     aea:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UBRR0H = (BAUD_PRESCALE >> 8);	//load upper 8-Bits of baud rate value into high byte of UBRR0H
     aee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  UBRR0L = BAUD_PRESCALE;			//load lower 8-Bits of Baud rate into low byte of UBRR0L	
     af2:	8f eb       	ldi	r24, 0xBF	; 191
     af4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

}
     af8:	08 95       	ret

00000afa <usart_write_char>:
//----------------------------------------------------------------------------
//Routine für die Serielle Ausgabe eines Zeichens (Schnittstelle0)
void usart_write_char(char c)
{
    //Warten solange bis Zeichen gesendet wurde
    while(!(USR & (1<<UDRE)));
     afa:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     afe:	95 ff       	sbrs	r25, 5
     b00:	fc cf       	rjmp	.-8      	; 0xafa <usart_write_char>
    //Ausgabe des Zeichens
    UDR = c;
     b02:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return;
}
     b06:	08 95       	ret

00000b08 <usart_write_str>:
}

//----------------------------------------------------------------------------
//Ausgabe eines Strings
void usart_write_str(char *str)
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	ec 01       	movw	r28, r24
	while (*str)
     b0e:	89 91       	ld	r24, Y+
     b10:	81 11       	cpse	r24, r1
     b12:	03 c0       	rjmp	.+6      	; 0xb1a <usart_write_str+0x12>
	{
		usart_write_char(*str++);
	}
}
     b14:	df 91       	pop	r29
     b16:	cf 91       	pop	r28
     b18:	08 95       	ret
		usart_write_char(*str++);
     b1a:	0e 94 7d 05 	call	0xafa	; 0xafa <usart_write_char>
     b1e:	f7 cf       	rjmp	.-18     	; 0xb0e <usart_write_str+0x6>

00000b20 <usart_write_P>:
     b20:	8f 92       	push	r8
     b22:	9f 92       	push	r9
     b24:	af 92       	push	r10
     b26:	bf 92       	push	r11
     b28:	cf 92       	push	r12
     b2a:	df 92       	push	r13
     b2c:	ef 92       	push	r14
     b2e:	ff 92       	push	r15
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
     b3c:	64 97       	sbiw	r28, 0x14	; 20
     b3e:	0f b6       	in	r0, 0x3f	; 63
     b40:	f8 94       	cli
     b42:	de bf       	out	0x3e, r29	; 62
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	cd bf       	out	0x3d, r28	; 61
     b48:	fe 01       	movw	r30, r28
     b4a:	b3 96       	adiw	r30, 0x23	; 35
     b4c:	a1 90       	ld	r10, Z+
     b4e:	b1 90       	ld	r11, Z+
     b50:	8f 01       	movw	r16, r30
     b52:	81 2c       	mov	r8, r1
     b54:	80 e3       	ldi	r24, 0x30	; 48
     b56:	98 2e       	mov	r9, r24
     b58:	75 01       	movw	r14, r10
     b5a:	4f ef       	ldi	r20, 0xFF	; 255
     b5c:	e4 1a       	sub	r14, r20
     b5e:	f4 0a       	sbc	r15, r20
     b60:	f5 01       	movw	r30, r10
     b62:	84 91       	lpm	r24, Z
     b64:	88 23       	and	r24, r24
     b66:	09 f4       	brne	.+2      	; 0xb6a <usart_write_P+0x4a>
     b68:	8c c0       	rjmp	.+280    	; 0xc82 <usart_write_P+0x162>
     b6a:	85 32       	cpi	r24, 0x25	; 37
     b6c:	09 f0       	breq	.+2      	; 0xb70 <usart_write_P+0x50>
     b6e:	85 c0       	rjmp	.+266    	; 0xc7a <usart_write_P+0x15a>
     b70:	65 01       	movw	r12, r10
     b72:	f2 e0       	ldi	r31, 0x02	; 2
     b74:	cf 0e       	add	r12, r31
     b76:	d1 1c       	adc	r13, r1
     b78:	f7 01       	movw	r30, r14
     b7a:	84 91       	lpm	r24, Z
     b7c:	48 2f       	mov	r20, r24
     b7e:	40 53       	subi	r20, 0x30	; 48
     b80:	55 0b       	sbc	r21, r21
     b82:	4a 30       	cpi	r20, 0x0A	; 10
     b84:	51 05       	cpc	r21, r1
     b86:	68 f4       	brcc	.+26     	; 0xba2 <usart_write_P+0x82>
     b88:	89 83       	std	Y+1, r24	; 0x01
     b8a:	1a 82       	std	Y+2, r1	; 0x02
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	0e 94 ae 07 	call	0xf5c	; 0xf5c <atoi>
     b94:	88 2e       	mov	r8, r24
     b96:	53 e0       	ldi	r21, 0x03	; 3
     b98:	a5 0e       	add	r10, r21
     b9a:	b1 1c       	adc	r11, r1
     b9c:	f6 01       	movw	r30, r12
     b9e:	84 91       	lpm	r24, Z
     ba0:	65 01       	movw	r12, r10
     ba2:	89 36       	cpi	r24, 0x69	; 105
     ba4:	41 f1       	breq	.+80     	; 0xbf6 <usart_write_P+0xd6>
     ba6:	38 f4       	brcc	.+14     	; 0xbb6 <usart_write_P+0x96>
     ba8:	82 36       	cpi	r24, 0x62	; 98
     baa:	09 f4       	brne	.+2      	; 0xbae <usart_write_P+0x8e>
     bac:	5e c0       	rjmp	.+188    	; 0xc6a <usart_write_P+0x14a>
     bae:	83 36       	cpi	r24, 0x63	; 99
     bb0:	c1 f0       	breq	.+48     	; 0xbe2 <usart_write_P+0xc2>
     bb2:	56 01       	movw	r10, r12
     bb4:	d1 cf       	rjmp	.-94     	; 0xb58 <usart_write_P+0x38>
     bb6:	83 37       	cpi	r24, 0x73	; 115
     bb8:	39 f0       	breq	.+14     	; 0xbc8 <usart_write_P+0xa8>
     bba:	88 37       	cpi	r24, 0x78	; 120
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <usart_write_P+0xa0>
     bbe:	57 c0       	rjmp	.+174    	; 0xc6e <usart_write_P+0x14e>
     bc0:	8f 36       	cpi	r24, 0x6F	; 111
     bc2:	b9 f7       	brne	.-18     	; 0xbb2 <usart_write_P+0x92>
     bc4:	48 e0       	ldi	r20, 0x08	; 8
     bc6:	18 c0       	rjmp	.+48     	; 0xbf8 <usart_write_P+0xd8>
     bc8:	f8 01       	movw	r30, r16
     bca:	e0 80       	ld	r14, Z
     bcc:	f1 80       	ldd	r15, Z+1	; 0x01
     bce:	0e 5f       	subi	r16, 0xFE	; 254
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	f7 01       	movw	r30, r14
     bd4:	81 91       	ld	r24, Z+
     bd6:	7f 01       	movw	r14, r30
     bd8:	88 23       	and	r24, r24
     bda:	59 f3       	breq	.-42     	; 0xbb2 <usart_write_P+0x92>
     bdc:	0e 94 7d 05 	call	0xafa	; 0xafa <usart_write_char>
     be0:	f8 cf       	rjmp	.-16     	; 0xbd2 <usart_write_P+0xb2>
     be2:	78 01       	movw	r14, r16
     be4:	f2 e0       	ldi	r31, 0x02	; 2
     be6:	ef 0e       	add	r14, r31
     be8:	f1 1c       	adc	r15, r1
     bea:	f8 01       	movw	r30, r16
     bec:	80 81       	ld	r24, Z
     bee:	0e 94 7d 05 	call	0xafa	; 0xafa <usart_write_char>
     bf2:	87 01       	movw	r16, r14
     bf4:	de cf       	rjmp	.-68     	; 0xbb2 <usart_write_P+0x92>
     bf6:	4a e0       	ldi	r20, 0x0A	; 10
     bf8:	50 e0       	ldi	r21, 0x00	; 0
     bfa:	be 01       	movw	r22, r28
     bfc:	65 5f       	subi	r22, 0xF5	; 245
     bfe:	7f 4f       	sbci	r23, 0xFF	; 255
     c00:	f8 01       	movw	r30, r16
     c02:	81 91       	ld	r24, Z+
     c04:	91 91       	ld	r25, Z+
     c06:	8f 01       	movw	r16, r30
     c08:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <itoa>
     c0c:	fe 01       	movw	r30, r28
     c0e:	3b 96       	adiw	r30, 0x0b	; 11
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	ac 01       	movw	r20, r24
     c16:	4f 5f       	subi	r20, 0xFF	; 255
     c18:	5f 4f       	sbci	r21, 0xFF	; 255
     c1a:	21 91       	ld	r18, Z+
     c1c:	21 11       	cpse	r18, r1
     c1e:	29 c0       	rjmp	.+82     	; 0xc72 <usart_write_P+0x152>
     c20:	88 16       	cp	r8, r24
     c22:	19 06       	cpc	r1, r25
     c24:	e1 f0       	breq	.+56     	; 0xc5e <usart_write_P+0x13e>
     c26:	dc f0       	brlt	.+54     	; 0xc5e <usart_write_P+0x13e>
     c28:	88 1a       	sub	r8, r24
     c2a:	fe 01       	movw	r30, r28
     c2c:	31 96       	adiw	r30, 0x01	; 1
     c2e:	88 2d       	mov	r24, r8
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	9c 01       	movw	r18, r24
     c34:	2e 0f       	add	r18, r30
     c36:	3f 1f       	adc	r19, r31
     c38:	7f 01       	movw	r14, r30
     c3a:	e2 17       	cp	r30, r18
     c3c:	f3 07       	cpc	r31, r19
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <usart_write_P+0x156>
     c40:	8e 0d       	add	r24, r14
     c42:	9f 1d       	adc	r25, r15
     c44:	fc 01       	movw	r30, r24
     c46:	10 82       	st	Z, r1
     c48:	be 01       	movw	r22, r28
     c4a:	65 5f       	subi	r22, 0xF5	; 245
     c4c:	7f 4f       	sbci	r23, 0xFF	; 255
     c4e:	c7 01       	movw	r24, r14
     c50:	0e 94 df 07 	call	0xfbe	; 0xfbe <strcat>
     c54:	b7 01       	movw	r22, r14
     c56:	ce 01       	movw	r24, r28
     c58:	0b 96       	adiw	r24, 0x0b	; 11
     c5a:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <strcpy>
     c5e:	ce 01       	movw	r24, r28
     c60:	0b 96       	adiw	r24, 0x0b	; 11
     c62:	0e 94 84 05 	call	0xb08	; 0xb08 <usart_write_str>
     c66:	81 2c       	mov	r8, r1
     c68:	a4 cf       	rjmp	.-184    	; 0xbb2 <usart_write_P+0x92>
     c6a:	42 e0       	ldi	r20, 0x02	; 2
     c6c:	c5 cf       	rjmp	.-118    	; 0xbf8 <usart_write_P+0xd8>
     c6e:	40 e1       	ldi	r20, 0x10	; 16
     c70:	c3 cf       	rjmp	.-122    	; 0xbf8 <usart_write_P+0xd8>
     c72:	ca 01       	movw	r24, r20
     c74:	cf cf       	rjmp	.-98     	; 0xc14 <usart_write_P+0xf4>
     c76:	91 92       	st	Z+, r9
     c78:	e0 cf       	rjmp	.-64     	; 0xc3a <usart_write_P+0x11a>
     c7a:	0e 94 7d 05 	call	0xafa	; 0xafa <usart_write_char>
     c7e:	67 01       	movw	r12, r14
     c80:	98 cf       	rjmp	.-208    	; 0xbb2 <usart_write_P+0x92>
     c82:	64 96       	adiw	r28, 0x14	; 20
     c84:	0f b6       	in	r0, 0x3f	; 63
     c86:	f8 94       	cli
     c88:	de bf       	out	0x3e, r29	; 62
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	cd bf       	out	0x3d, r28	; 61
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	08 95       	ret

00000ca8 <main>:
#include "fat.h"
#include "usart.h"

//Hauptprogramm
int main (void)
{
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	c7 50       	subi	r28, 0x07	; 7
     cae:	d2 40       	sbci	r29, 0x02	; 2
     cb0:	0f b6       	in	r0, 0x3f	; 63
     cb2:	f8 94       	cli
     cb4:	de bf       	out	0x3e, r29	; 62
     cb6:	0f be       	out	0x3f, r0	; 63
     cb8:	cd bf       	out	0x3d, r28	; 61
	PORTD |= (1<<PD1);  //Tx Pin => Output
     cba:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1<<PD0);	//Rx Pin input
     cbc:	58 98       	cbi	0x0b, 0	; 11
	
	
	usart_init(9600);
     cbe:	60 e8       	ldi	r22, 0x80	; 128
     cc0:	75 e2       	ldi	r23, 0x25	; 37
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	0e 94 71 05 	call	0xae2	; 0xae2 <usart_init>
	
	//Initialisierung der MMC/SD-Karte
	usart_write("System Ready!\r\n");	
     cca:	88 e1       	ldi	r24, 0x18	; 24
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
	while ( mmc_init() !=0) //ist der Rückgabewert ungleich NULL ist ein Fehler aufgetreten
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
		{
		usart_write("** Keine MMC/SD Karte gefunden!! **\n");	
     cda:	03 ef       	ldi	r16, 0xF3	; 243
     cdc:	10 e0       	ldi	r17, 0x00	; 0
	while ( mmc_init() !=0) //ist der Rückgabewert ungleich NULL ist ein Fehler aufgetreten
     cde:	0e 94 13 01 	call	0x226	; 0x226 <mmc_init>
     ce2:	81 11       	cpse	r24, r1
     ce4:	e8 c0       	rjmp	.+464    	; 0xeb6 <main+0x20e>
		}
	usart_write("Karte gefunden!!\n");
     ce6:	81 ee       	ldi	r24, 0xE1	; 225
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9f 93       	push	r25
     cec:	8f 93       	push	r24
     cee:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
	
	fat_init();//laden Cluster OFFSET und Size
     cf2:	0e 94 80 02 	call	0x500	; 0x500 <fat_init>
	//Initialisierung der MMC/SD-Karte ENDE!

	unsigned char Buffer[512];
	unsigned int tmp;
	
	mmc_read_csd (Buffer);
     cf6:	ce 01       	movw	r24, r28
     cf8:	01 96       	adiw	r24, 0x01	; 1
     cfa:	7c 01       	movw	r14, r24
     cfc:	0e 94 3e 02 	call	0x47c	; 0x47c <mmc_read_csd>
     d00:	5e 01       	movw	r10, r28
     d02:	91 e1       	ldi	r25, 0x11	; 17
     d04:	a9 0e       	add	r10, r25
     d06:	b1 1c       	adc	r11, r1
     d08:	0f 90       	pop	r0
     d0a:	0f 90       	pop	r0
     d0c:	87 01       	movw	r16, r14
	
	for (tmp = 0;tmp<16;tmp++)
		{
		usart_write("%x ",Buffer[tmp]);
     d0e:	4d ed       	ldi	r20, 0xDD	; 221
     d10:	c4 2e       	mov	r12, r20
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	d4 2e       	mov	r13, r20
     d16:	f8 01       	movw	r30, r16
     d18:	81 91       	ld	r24, Z+
     d1a:	8f 01       	movw	r16, r30
     d1c:	1f 92       	push	r1
     d1e:	8f 93       	push	r24
     d20:	df 92       	push	r13
     d22:	cf 92       	push	r12
     d24:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
	for (tmp = 0;tmp<16;tmp++)
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	0f 90       	pop	r0
     d30:	0a 15       	cp	r16, r10
     d32:	1b 05       	cpc	r17, r11
     d34:	81 f7       	brne	.-32     	; 0xd16 <main+0x6e>
		};


	//Ausgabe des Root Directory
	unsigned int Clustervar;
	unsigned char Dir_Attrib = 0;
     d36:	c9 5f       	subi	r28, 0xF9	; 249
     d38:	dd 4f       	sbci	r29, 0xFD	; 253
     d3a:	18 82       	st	Y, r1
     d3c:	c7 50       	subi	r28, 0x07	; 7
     d3e:	d2 40       	sbci	r29, 0x02	; 2
	unsigned long Size = 0;
     d40:	cf 5f       	subi	r28, 0xFF	; 255
     d42:	dd 4f       	sbci	r29, 0xFD	; 253
     d44:	18 82       	st	Y, r1
     d46:	19 82       	std	Y+1, r1	; 0x01
     d48:	1a 82       	std	Y+2, r1	; 0x02
     d4a:	1b 82       	std	Y+3, r1	; 0x03
     d4c:	c1 50       	subi	r28, 0x01	; 1
     d4e:	d2 40       	sbci	r29, 0x02	; 2
	usart_write("\r\nDirectory\r\n");
     d50:	8f ec       	ldi	r24, 0xCF	; 207
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
	for (char a = 1;a < 240;a++)
     d60:	dd 24       	eor	r13, r13
     d62:	d3 94       	inc	r13
			if (Clustervar == 0xffff)
			{
				break;
			}
		tmp = (Size & 0x0000FFFF);
		usart_write("Cluster = %4x DirA = %2x FileName = ",Clustervar,Dir_Attrib);
     d64:	9a ea       	ldi	r25, 0xAA	; 170
     d66:	49 2e       	mov	r4, r25
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	59 2e       	mov	r5, r25
		usart_write("%s",Buffer);
     d6c:	27 ea       	ldi	r18, 0xA7	; 167
     d6e:	62 2e       	mov	r6, r18
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	72 2e       	mov	r7, r18
		usart_write("\r\n");
     d74:	34 ea       	ldi	r19, 0xA4	; 164
     d76:	a3 2e       	mov	r10, r19
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	b3 2e       	mov	r11, r19
		Clustervar = fat_read_dir_ent(0,a,&Size,&Dir_Attrib,Buffer);
     d7c:	87 01       	movw	r16, r14
     d7e:	9e 01       	movw	r18, r28
     d80:	29 5f       	subi	r18, 0xF9	; 249
     d82:	3d 4f       	sbci	r19, 0xFD	; 253
     d84:	ae 01       	movw	r20, r28
     d86:	4f 5f       	subi	r20, 0xFF	; 255
     d88:	5d 4f       	sbci	r21, 0xFD	; 253
     d8a:	6d 2d       	mov	r22, r13
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	0e 94 86 03 	call	0x70c	; 0x70c <fat_read_dir_ent>
     d94:	cb 5f       	subi	r28, 0xFB	; 251
     d96:	dd 4f       	sbci	r29, 0xFD	; 253
     d98:	99 83       	std	Y+1, r25	; 0x01
     d9a:	88 83       	st	Y, r24
     d9c:	c5 50       	subi	r28, 0x05	; 5
     d9e:	d2 40       	sbci	r29, 0x02	; 2
			if (Clustervar == 0xffff)
     da0:	8f 3f       	cpi	r24, 0xFF	; 255
     da2:	98 07       	cpc	r25, r24
     da4:	01 f1       	breq	.+64     	; 0xde6 <main+0x13e>
		usart_write("Cluster = %4x DirA = %2x FileName = ",Clustervar,Dir_Attrib);
     da6:	c9 5f       	subi	r28, 0xF9	; 249
     da8:	dd 4f       	sbci	r29, 0xFD	; 253
     daa:	28 81       	ld	r18, Y
     dac:	c7 50       	subi	r28, 0x07	; 7
     dae:	d2 40       	sbci	r29, 0x02	; 2
     db0:	1f 92       	push	r1
     db2:	2f 93       	push	r18
     db4:	9f 93       	push	r25
     db6:	8f 93       	push	r24
     db8:	5f 92       	push	r5
     dba:	4f 92       	push	r4
     dbc:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
		usart_write("%s",Buffer);
     dc0:	ff 92       	push	r15
     dc2:	ef 92       	push	r14
     dc4:	7f 92       	push	r7
     dc6:	6f 92       	push	r6
     dc8:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
		usart_write("\r\n");
     dcc:	bf 92       	push	r11
     dce:	af 92       	push	r10
     dd0:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
	for (char a = 1;a < 240;a++)
     dd4:	d3 94       	inc	r13
     dd6:	0f b6       	in	r0, 0x3f	; 63
     dd8:	f8 94       	cli
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	0f be       	out	0x3f, r0	; 63
     dde:	cd bf       	out	0x3d, r28	; 61
     de0:	90 ef       	ldi	r25, 0xF0	; 240
     de2:	d9 12       	cpse	r13, r25
     de4:	cb cf       	rjmp	.-106    	; 0xd7c <main+0xd4>
	}
	usart_write("\r\nDirectory Ende\r\n");
     de6:	81 e9       	ldi	r24, 0x91	; 145
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	9f 93       	push	r25
     dec:	8f 93       	push	r24
     dee:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>

	//Lade Cluster für das index.htm File in den Speicher 
	Clustervar = 0;//suche im Root Verzeichnis
     df2:	cb 5f       	subi	r28, 0xFB	; 251
     df4:	dd 4f       	sbci	r29, 0xFD	; 253
     df6:	19 82       	std	Y+1, r1	; 0x01
     df8:	18 82       	st	Y, r1
     dfa:	c5 50       	subi	r28, 0x05	; 5
     dfc:	d2 40       	sbci	r29, 0x02	; 2
	if (fat_search_file((unsigned char *)"mmc.txt",&Clustervar,&Size,&Dir_Attrib,Buffer) == 1)
     dfe:	87 01       	movw	r16, r14
     e00:	9e 01       	movw	r18, r28
     e02:	29 5f       	subi	r18, 0xF9	; 249
     e04:	3d 4f       	sbci	r19, 0xFD	; 253
     e06:	ae 01       	movw	r20, r28
     e08:	4f 5f       	subi	r20, 0xFF	; 255
     e0a:	5d 4f       	sbci	r21, 0xFD	; 253
     e0c:	be 01       	movw	r22, r28
     e0e:	6b 5f       	subi	r22, 0xFB	; 251
     e10:	7d 4f       	sbci	r23, 0xFD	; 253
     e12:	8e e1       	ldi	r24, 0x1E	; 30
     e14:	91 e0       	ldi	r25, 0x01	; 1
     e16:	0e 94 30 05 	call	0xa60	; 0xa60 <fat_search_file>
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	81 30       	cpi	r24, 0x01	; 1
     e20:	c9 f5       	brne	.+114    	; 0xe94 <main+0x1ec>
		{
		usart_write("\nFile Found!!\r\n");
     e22:	81 e8       	ldi	r24, 0x81	; 129
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9f 93       	push	r25
     e28:	8f 93       	push	r24
     e2a:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
     e2e:	0f 90       	pop	r0
     e30:	0f 90       	pop	r0
     e32:	41 2c       	mov	r4, r1
     e34:	51 2c       	mov	r5, r1
     e36:	32 01       	movw	r6, r4
     e38:	57 01       	movw	r10, r14
     e3a:	ee ef       	ldi	r30, 0xFE	; 254
     e3c:	be 1a       	sub	r11, r30
		for (int b = 0;b<52;b++)
			{
			fat_read_file (Clustervar,Buffer,b);
			for (int a = 0;a<512;a++)
				{
				usart_write("%c",Buffer[a]);
     e3e:	8e e7       	ldi	r24, 0x7E	; 126
     e40:	c8 2e       	mov	r12, r24
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	d8 2e       	mov	r13, r24
			fat_read_file (Clustervar,Buffer,b);
     e46:	a3 01       	movw	r20, r6
     e48:	92 01       	movw	r18, r4
     e4a:	b7 01       	movw	r22, r14
     e4c:	cb 5f       	subi	r28, 0xFB	; 251
     e4e:	dd 4f       	sbci	r29, 0xFD	; 253
     e50:	88 81       	ld	r24, Y
     e52:	99 81       	ldd	r25, Y+1	; 0x01
     e54:	c5 50       	subi	r28, 0x05	; 5
     e56:	d2 40       	sbci	r29, 0x02	; 2
     e58:	0e 94 40 04 	call	0x880	; 0x880 <fat_read_file>
     e5c:	87 01       	movw	r16, r14
				usart_write("%c",Buffer[a]);
     e5e:	f8 01       	movw	r30, r16
     e60:	81 91       	ld	r24, Z+
     e62:	8f 01       	movw	r16, r30
     e64:	1f 92       	push	r1
     e66:	8f 93       	push	r24
     e68:	df 92       	push	r13
     e6a:	cf 92       	push	r12
     e6c:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
			for (int a = 0;a<512;a++)
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	a0 16       	cp	r10, r16
     e7a:	b1 06       	cpc	r11, r17
     e7c:	81 f7       	brne	.-32     	; 0xe5e <main+0x1b6>
     e7e:	ff ef       	ldi	r31, 0xFF	; 255
     e80:	4f 1a       	sub	r4, r31
     e82:	5f 0a       	sbc	r5, r31
     e84:	6f 0a       	sbc	r6, r31
     e86:	7f 0a       	sbc	r7, r31
		for (int b = 0;b<52;b++)
     e88:	24 e3       	ldi	r18, 0x34	; 52
     e8a:	42 16       	cp	r4, r18
     e8c:	51 04       	cpc	r5, r1
     e8e:	61 04       	cpc	r6, r1
     e90:	71 04       	cpc	r7, r1
     e92:	c9 f6       	brne	.-78     	; 0xe46 <main+0x19e>
				}
			}
		}

	usart_write("FERTIG!!\r\n");
     e94:	83 e7       	ldi	r24, 0x73	; 115
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
     ea0:	0f 90       	pop	r0
     ea2:	0f 90       	pop	r0
	//Hauptprogramm läuft ständig in einer schleife und macht nichts
	while (1)
		{
			usart_write("FERTIG!!\r\n");
     ea4:	08 e6       	ldi	r16, 0x68	; 104
     ea6:	10 e0       	ldi	r17, 0x00	; 0
     ea8:	1f 93       	push	r17
     eaa:	0f 93       	push	r16
     eac:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	f9 cf       	rjmp	.-14     	; 0xea8 <main+0x200>
		usart_write("** Keine MMC/SD Karte gefunden!! **\n");	
     eb6:	1f 93       	push	r17
     eb8:	0f 93       	push	r16
     eba:	0e 94 90 05 	call	0xb20	; 0xb20 <usart_write_P>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0d cf       	rjmp	.-486    	; 0xcde <main+0x36>

00000ec4 <__mulsi3>:
     ec4:	db 01       	movw	r26, r22
     ec6:	8f 93       	push	r24
     ec8:	9f 93       	push	r25
     eca:	0e 94 94 07 	call	0xf28	; 0xf28 <__muluhisi3>
     ece:	bf 91       	pop	r27
     ed0:	af 91       	pop	r26
     ed2:	a2 9f       	mul	r26, r18
     ed4:	80 0d       	add	r24, r0
     ed6:	91 1d       	adc	r25, r1
     ed8:	a3 9f       	mul	r26, r19
     eda:	90 0d       	add	r25, r0
     edc:	b2 9f       	mul	r27, r18
     ede:	90 0d       	add	r25, r0
     ee0:	11 24       	eor	r1, r1
     ee2:	08 95       	ret

00000ee4 <__udivmodsi4>:
     ee4:	a1 e2       	ldi	r26, 0x21	; 33
     ee6:	1a 2e       	mov	r1, r26
     ee8:	aa 1b       	sub	r26, r26
     eea:	bb 1b       	sub	r27, r27
     eec:	fd 01       	movw	r30, r26
     eee:	0d c0       	rjmp	.+26     	; 0xf0a <__udivmodsi4_ep>

00000ef0 <__udivmodsi4_loop>:
     ef0:	aa 1f       	adc	r26, r26
     ef2:	bb 1f       	adc	r27, r27
     ef4:	ee 1f       	adc	r30, r30
     ef6:	ff 1f       	adc	r31, r31
     ef8:	a2 17       	cp	r26, r18
     efa:	b3 07       	cpc	r27, r19
     efc:	e4 07       	cpc	r30, r20
     efe:	f5 07       	cpc	r31, r21
     f00:	20 f0       	brcs	.+8      	; 0xf0a <__udivmodsi4_ep>
     f02:	a2 1b       	sub	r26, r18
     f04:	b3 0b       	sbc	r27, r19
     f06:	e4 0b       	sbc	r30, r20
     f08:	f5 0b       	sbc	r31, r21

00000f0a <__udivmodsi4_ep>:
     f0a:	66 1f       	adc	r22, r22
     f0c:	77 1f       	adc	r23, r23
     f0e:	88 1f       	adc	r24, r24
     f10:	99 1f       	adc	r25, r25
     f12:	1a 94       	dec	r1
     f14:	69 f7       	brne	.-38     	; 0xef0 <__udivmodsi4_loop>
     f16:	60 95       	com	r22
     f18:	70 95       	com	r23
     f1a:	80 95       	com	r24
     f1c:	90 95       	com	r25
     f1e:	9b 01       	movw	r18, r22
     f20:	ac 01       	movw	r20, r24
     f22:	bd 01       	movw	r22, r26
     f24:	cf 01       	movw	r24, r30
     f26:	08 95       	ret

00000f28 <__muluhisi3>:
     f28:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__umulhisi3>
     f2c:	a5 9f       	mul	r26, r21
     f2e:	90 0d       	add	r25, r0
     f30:	b4 9f       	mul	r27, r20
     f32:	90 0d       	add	r25, r0
     f34:	a4 9f       	mul	r26, r20
     f36:	80 0d       	add	r24, r0
     f38:	91 1d       	adc	r25, r1
     f3a:	11 24       	eor	r1, r1
     f3c:	08 95       	ret

00000f3e <__umulhisi3>:
     f3e:	a2 9f       	mul	r26, r18
     f40:	b0 01       	movw	r22, r0
     f42:	b3 9f       	mul	r27, r19
     f44:	c0 01       	movw	r24, r0
     f46:	a3 9f       	mul	r26, r19
     f48:	70 0d       	add	r23, r0
     f4a:	81 1d       	adc	r24, r1
     f4c:	11 24       	eor	r1, r1
     f4e:	91 1d       	adc	r25, r1
     f50:	b2 9f       	mul	r27, r18
     f52:	70 0d       	add	r23, r0
     f54:	81 1d       	adc	r24, r1
     f56:	11 24       	eor	r1, r1
     f58:	91 1d       	adc	r25, r1
     f5a:	08 95       	ret

00000f5c <atoi>:
     f5c:	fc 01       	movw	r30, r24
     f5e:	88 27       	eor	r24, r24
     f60:	99 27       	eor	r25, r25
     f62:	e8 94       	clt
     f64:	21 91       	ld	r18, Z+
     f66:	20 32       	cpi	r18, 0x20	; 32
     f68:	e9 f3       	breq	.-6      	; 0xf64 <atoi+0x8>
     f6a:	29 30       	cpi	r18, 0x09	; 9
     f6c:	10 f0       	brcs	.+4      	; 0xf72 <atoi+0x16>
     f6e:	2e 30       	cpi	r18, 0x0E	; 14
     f70:	c8 f3       	brcs	.-14     	; 0xf64 <atoi+0x8>
     f72:	2b 32       	cpi	r18, 0x2B	; 43
     f74:	41 f0       	breq	.+16     	; 0xf86 <atoi+0x2a>
     f76:	2d 32       	cpi	r18, 0x2D	; 45
     f78:	39 f4       	brne	.+14     	; 0xf88 <atoi+0x2c>
     f7a:	68 94       	set
     f7c:	04 c0       	rjmp	.+8      	; 0xf86 <atoi+0x2a>
     f7e:	0e 94 07 08 	call	0x100e	; 0x100e <__mulhi_const_10>
     f82:	82 0f       	add	r24, r18
     f84:	91 1d       	adc	r25, r1
     f86:	21 91       	ld	r18, Z+
     f88:	20 53       	subi	r18, 0x30	; 48
     f8a:	2a 30       	cpi	r18, 0x0A	; 10
     f8c:	c0 f3       	brcs	.-16     	; 0xf7e <atoi+0x22>
     f8e:	1e f4       	brtc	.+6      	; 0xf96 <atoi+0x3a>
     f90:	90 95       	com	r25
     f92:	81 95       	neg	r24
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	08 95       	ret

00000f98 <strcasecmp>:
     f98:	fb 01       	movw	r30, r22
     f9a:	dc 01       	movw	r26, r24
     f9c:	8d 91       	ld	r24, X+
     f9e:	81 34       	cpi	r24, 0x41	; 65
     fa0:	1c f0       	brlt	.+6      	; 0xfa8 <strcasecmp+0x10>
     fa2:	8b 35       	cpi	r24, 0x5B	; 91
     fa4:	0c f4       	brge	.+2      	; 0xfa8 <strcasecmp+0x10>
     fa6:	80 5e       	subi	r24, 0xE0	; 224
     fa8:	61 91       	ld	r22, Z+
     faa:	61 34       	cpi	r22, 0x41	; 65
     fac:	1c f0       	brlt	.+6      	; 0xfb4 <strcasecmp+0x1c>
     fae:	6b 35       	cpi	r22, 0x5B	; 91
     fb0:	0c f4       	brge	.+2      	; 0xfb4 <strcasecmp+0x1c>
     fb2:	60 5e       	subi	r22, 0xE0	; 224
     fb4:	86 1b       	sub	r24, r22
     fb6:	61 11       	cpse	r22, r1
     fb8:	89 f3       	breq	.-30     	; 0xf9c <strcasecmp+0x4>
     fba:	99 0b       	sbc	r25, r25
     fbc:	08 95       	ret

00000fbe <strcat>:
     fbe:	fb 01       	movw	r30, r22
     fc0:	dc 01       	movw	r26, r24
     fc2:	0d 90       	ld	r0, X+
     fc4:	00 20       	and	r0, r0
     fc6:	e9 f7       	brne	.-6      	; 0xfc2 <strcat+0x4>
     fc8:	11 97       	sbiw	r26, 0x01	; 1
     fca:	01 90       	ld	r0, Z+
     fcc:	0d 92       	st	X+, r0
     fce:	00 20       	and	r0, r0
     fd0:	e1 f7       	brne	.-8      	; 0xfca <strcat+0xc>
     fd2:	08 95       	ret

00000fd4 <strcpy>:
     fd4:	fb 01       	movw	r30, r22
     fd6:	dc 01       	movw	r26, r24
     fd8:	01 90       	ld	r0, Z+
     fda:	0d 92       	st	X+, r0
     fdc:	00 20       	and	r0, r0
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <strcpy+0x4>
     fe0:	08 95       	ret

00000fe2 <itoa>:
     fe2:	45 32       	cpi	r20, 0x25	; 37
     fe4:	51 05       	cpc	r21, r1
     fe6:	20 f4       	brcc	.+8      	; 0xff0 <itoa+0xe>
     fe8:	42 30       	cpi	r20, 0x02	; 2
     fea:	10 f0       	brcs	.+4      	; 0xff0 <itoa+0xe>
     fec:	0c 94 fc 07 	jmp	0xff8	; 0xff8 <__itoa_ncheck>
     ff0:	fb 01       	movw	r30, r22
     ff2:	10 82       	st	Z, r1
     ff4:	cb 01       	movw	r24, r22
     ff6:	08 95       	ret

00000ff8 <__itoa_ncheck>:
     ff8:	bb 27       	eor	r27, r27
     ffa:	4a 30       	cpi	r20, 0x0A	; 10
     ffc:	31 f4       	brne	.+12     	; 0x100a <__itoa_ncheck+0x12>
     ffe:	99 23       	and	r25, r25
    1000:	22 f4       	brpl	.+8      	; 0x100a <__itoa_ncheck+0x12>
    1002:	bd e2       	ldi	r27, 0x2D	; 45
    1004:	90 95       	com	r25
    1006:	81 95       	neg	r24
    1008:	9f 4f       	sbci	r25, 0xFF	; 255
    100a:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__utoa_common>

0000100e <__mulhi_const_10>:
    100e:	7a e0       	ldi	r23, 0x0A	; 10
    1010:	97 9f       	mul	r25, r23
    1012:	90 2d       	mov	r25, r0
    1014:	87 9f       	mul	r24, r23
    1016:	80 2d       	mov	r24, r0
    1018:	91 0d       	add	r25, r1
    101a:	11 24       	eor	r1, r1
    101c:	08 95       	ret

0000101e <__utoa_ncheck>:
    101e:	bb 27       	eor	r27, r27

00001020 <__utoa_common>:
    1020:	fb 01       	movw	r30, r22
    1022:	55 27       	eor	r21, r21
    1024:	aa 27       	eor	r26, r26
    1026:	88 0f       	add	r24, r24
    1028:	99 1f       	adc	r25, r25
    102a:	aa 1f       	adc	r26, r26
    102c:	a4 17       	cp	r26, r20
    102e:	10 f0       	brcs	.+4      	; 0x1034 <__utoa_common+0x14>
    1030:	a4 1b       	sub	r26, r20
    1032:	83 95       	inc	r24
    1034:	50 51       	subi	r21, 0x10	; 16
    1036:	b9 f7       	brne	.-18     	; 0x1026 <__utoa_common+0x6>
    1038:	a0 5d       	subi	r26, 0xD0	; 208
    103a:	aa 33       	cpi	r26, 0x3A	; 58
    103c:	08 f0       	brcs	.+2      	; 0x1040 <__utoa_common+0x20>
    103e:	a9 5d       	subi	r26, 0xD9	; 217
    1040:	a1 93       	st	Z+, r26
    1042:	00 97       	sbiw	r24, 0x00	; 0
    1044:	79 f7       	brne	.-34     	; 0x1024 <__utoa_common+0x4>
    1046:	b1 11       	cpse	r27, r1
    1048:	b1 93       	st	Z+, r27
    104a:	11 92       	st	Z+, r1
    104c:	cb 01       	movw	r24, r22
    104e:	0c 94 29 08 	jmp	0x1052	; 0x1052 <strrev>

00001052 <strrev>:
    1052:	dc 01       	movw	r26, r24
    1054:	fc 01       	movw	r30, r24
    1056:	67 2f       	mov	r22, r23
    1058:	71 91       	ld	r23, Z+
    105a:	77 23       	and	r23, r23
    105c:	e1 f7       	brne	.-8      	; 0x1056 <strrev+0x4>
    105e:	32 97       	sbiw	r30, 0x02	; 2
    1060:	04 c0       	rjmp	.+8      	; 0x106a <strrev+0x18>
    1062:	7c 91       	ld	r23, X
    1064:	6d 93       	st	X+, r22
    1066:	70 83       	st	Z, r23
    1068:	62 91       	ld	r22, -Z
    106a:	ae 17       	cp	r26, r30
    106c:	bf 07       	cpc	r27, r31
    106e:	c8 f3       	brcs	.-14     	; 0x1062 <strrev+0x10>
    1070:	08 95       	ret

00001072 <_exit>:
    1072:	f8 94       	cli

00001074 <__stop_program>:
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <__stop_program>
