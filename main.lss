
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000f0c  00000fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080010c  0080010c  00000fac  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  00001000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ded  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a28  00000000  00000000  00002e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013d4  00000000  00000000  00003855  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e0  00000000  00000000  00004c2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000057a  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000020bb  00000000  00000000  00005586  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00007641  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__ctors_end>
   4:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
   8:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
   c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  10:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  14:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  18:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  1c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  20:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  24:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  28:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  2c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  30:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  34:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  38:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  3c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  40:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  44:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  48:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  4c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  50:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  54:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  58:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  5c:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  60:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>
  64:	0c 94 0a 04 	jmp	0x814	; 0x814 <__bad_interrupt>

00000068 <LCD_shifts>:
  68:	00 01 00 01                                         ....

0000006c <LCD_rots>:
  6c:	00 60 c0 a0                                         .`..

00000070 <LCD_init_seq>:
  70:	11 80 05 3a 01 06 26 01 04 f2 01 01 e0 0f 3f 25     ...:..&.......?%
  80:	1c 1e 20 12 2a 90 24 11 00 00 00 00 00 e1 0f 20     .. .*.$........ 
  90:	20 20 20 05 00 15 a7 3d 18 25 2a 2b 2b 3a b1 02        ....=.%*++:..
  a0:	11 14 b4 01 07 c0 02 0a 02 c1 01 02 c5 02 50 5b     ..............P[
  b0:	c7 01 40 2a 04 00 00 00 7f 2b 04 00 00 00 7f 36     ..@*.....+.....6
  c0:	01 08 29 00 2c 00 00 00                             ..).,...

000000c8 <font_image_9_16>:
	...
  d8:	00 00 00 06 03 01 80 c0 60 30 18 0c 00 00 01 80     ........`0......
  e8:	c0 00 00 00 66 33 19 8c c0 00 00 00 00 00 00 00     ....f3..........
	...
 100:	19 8c c6 67 fd 98 cc ff b3 19 8c c0 00 00 00 00     ...g............
 110:	18 0c 1f 98 6c 36 01 e0 3c 03 01 b0 cf c1 80 c0     ....l6..<.......
 120:	00 00 00 00 1c 1b 0d 83 98 30 60 ce 0d 86 c1 c0     .........0`.....
 130:	00 00 00 00 00 00 1e 19 8c c6 61 e0 60 7b 67 33     ..........a.`{g3
 140:	19 c7 b0 00 00 00 18 0c 03 01 80 00 00 00 00 00     ................
	...
 158:	00 06 06 03 03 01 80 c0 60 30 18 06 03 00 c0 00     ........`0......
 168:	00 00 00 18 06 03 00 c0 60 30 18 0c 06 06 03 03     ........`0......
 178:	00 00 00 00 00 00 00 04 43 60 e1 fc 38 36 11 00     ........C`..86..
	...
 190:	00 03 01 80 c3 fc 30 18 0c 00 00 00 00 00 00 00     ......0.........
	...
 1ac:	01 80 c0 c0 60 00 00 00 00 00 00 00 01 fc 00 00     ....`...........
	...
 1d0:	01 80 c0 00 00 00 03 01 81 80 c0 c0 60 60 30 30     ............``00
 1e0:	18 18 0c 0c 06 00 00 00 00 1e 19 8c cc 36 1b 0d     .............6..
 1f0:	86 c3 61 99 8c c3 c0 00 00 00 00 02 03 03 80 c0     ..a.............
 200:	60 30 18 0c 06 03 01 80 c0 00 00 00 00 3f 30 d8     `0...........?0.
 210:	6c 30 18 18 38 30 30 30 18 0f f0 00 00 00 00 7f     l0..8000........
 220:	01 80 c0 c0 c0 18 06 03 01 80 d8 c7 c0 00 00 00     ................
 230:	00 07 07 83 c3 61 b1 98 cc c6 7f 81 80 c0 60 00     .....a........`.
 240:	00 00 00 7f b0 18 0c 06 e3 98 06 03 01 80 d8 c7     ................
 250:	c0 00 00 00 00 0e 0c 0c 06 06 e3 99 86 c3 61 b0     ..............a.
 260:	cc c3 c0 00 00 00 00 7f 80 c0 60 60 30 18 18 0c     ..........``0...
 270:	06 06 03 01 80 00 00 00 00 1e 19 8c c6 61 e1 99     .............a..
 280:	86 c3 61 b0 cc c3 c0 00 00 00 00 1e 19 98 6c 36     ..a...........l6
 290:	1b 0c ce 3b 03 01 81 87 00 00 00 00 00 00 00 00     ...;............
 2a0:	00 c0 60 00 00 00 06 03 00 00 00 00 00 00 00 00     ..`.............
 2b0:	00 00 00 00 00 00 00 0c 06 00 01 80 c0 c0 60 00     ..............`.
 2c0:	00 00 00 00 00 10 38 70 e0 1c 03 80 40 00 00 00     ......8p....@...
 2d0:	00 00 00 00 00 00 00 03 f8 00 00 7f 00 00 00 00     ................
	...
 2e8:	04 03 80 70 0e 1c 38 10 00 00 00 00 00 00 00 1f     ...p..8.........
 2f8:	18 cc 66 30 30 30 30 18 00 00 03 01 80 00 00 00     ..f0000.........
 308:	00 00 0f 0c cc 36 7b 6d b6 ce 60 18 07 80 00 00     .....6{m..`.....
 318:	00 00 00 0c 06 07 86 63 31 99 86 ff 61 b0 d8 6c     .......c1...a..l
 328:	30 00 00 00 00 7c 33 18 cc 66 63 f1 8c c3 61 b0     0....|3..fc...a.
 338:	d8 cf c0 00 00 00 00 0f 0c cc 06 06 03 01 80 c0     ................
 348:	30 18 06 61 e0 00 00 00 00 7c 33 18 cc 66 1b 0d     0..a.....|3..f..
 358:	86 c3 63 31 99 8f 80 00 00 00 00 7f b0 18 0c 06     ..c1............
 368:	03 f1 80 c0 60 30 18 0f f0 00 00 00 00 7f b0 18     ....`0..........
 378:	0c 06 03 f1 80 c0 60 30 18 0c 00 00 00 00 00 0f     ......`0........
 388:	0c cc 06 06 03 01 8e c3 31 98 c6 61 f0 00 00 00     ........1..a....
 398:	00 61 b0 d8 6c 36 1b fd 86 c3 61 b0 d8 6c 30 00     .a..l6....a..l0.
 3a8:	00 00 00 3f 06 03 01 80 c0 60 30 18 0c 06 03 07     ...?.....`0.....
 3b8:	e0 00 00 00 00 01 80 c0 60 30 18 0c 06 03 01 80     ........`0......
 3c8:	c0 c7 c0 00 00 00 00 61 b0 d8 cc c6 c3 c1 e0 d8     .......a........
 3d8:	66 31 98 6c 30 00 00 00 00 60 30 18 0c 06 03 01     f1.l0....`0.....
 3e8:	80 c0 60 30 18 0f f0 00 00 00 00 61 b0 dc ee 77     ..`0.......a...w
 3f8:	fb 6d b6 c3 61 b0 d8 6c 30 00 00 00 00 61 b8 dc     .m..a..l0....a..
 408:	6f 36 9b 6d 96 cf 63 b1 d8 6c 30 00 00 00 00 1e     o6.m..c..l0.....
 418:	19 8c cc 36 1b 0d 86 c3 61 99 8c c3 c0 00 00 00     ...6....a.......
 428:	00 7e 31 98 6c 36 1b 19 f8 c0 60 30 18 0c 00 00     .~1.l6....`0....
 438:	00 00 00 1e 19 8c cc 36 1b 0d 86 c3 61 99 8c c3     .......6....a...
 448:	c0 60 18 0c 00 7e 31 98 6c 36 1b 19 f8 cc 63 31     .`...~1.l6....c1
 458:	98 6c 30 00 00 00 00 1f 18 18 0c 03 00 e0 1c 03     .l0.............
 468:	01 80 c0 cf c0 00 00 00 00 7f 86 03 01 80 c0 60     ...............`
 478:	30 18 0c 06 03 01 80 00 00 00 00 61 b0 d8 6c 36     0..........a..l6
 488:	1b 0d 86 c3 61 99 8c c3 c0 00 00 00 00 61 b0 d8     ....a........a..
 498:	6c 33 31 98 cc 66 33 0f 03 01 80 00 00 00 00 61     l31..f3........a
 4a8:	b0 d8 6c 36 1b 0d b6 db 7f b9 d8 6c 30 00 00 00     ..l6.......l0...
 4b8:	00 61 b0 cc c2 41 e0 60 30 3c 12 19 98 6c 30 00     .a...A.`0<...l0.
 4c8:	00 00 00 61 b0 cc c6 61 e0 60 30 18 0c 06 03 01     ...a...a.`0.....
 4d8:	80 00 00 00 00 7f 80 c0 c0 60 60 60 30 30 30 18     .........```000.
 4e8:	18 0f f0 00 00 00 1e 0c 06 03 01 80 c0 60 30 18     .............`0.
 4f8:	0c 06 03 01 80 f0 00 00 00 30 18 06 03 00 c0 60     .........0.....`
 508:	18 0c 03 01 80 60 30 00 00 00 1e 03 01 80 c0 60     .....`0........`
 518:	30 18 0c 06 03 01 80 c0 60 f0 00 00 08 0e 0d 8c     0.......`.......
 528:	66 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00     f0..............
	...
 544:	07 fc 00 00 18 0c 03 01 80 00 00 00 00 00 00 00     ................
	...
 55c:	00 00 00 01 f0 0c 06 3f 31 98 cc 63 e0 00 00 00     .......?1..c....
 56c:	00 30 18 0c 06 03 61 d8 c6 63 31 98 ce c6 c0 00     .0....a..c1.....
	...
 584:	f8 c0 c0 60 30 18 06 01 f0 00 00 00 00 01 80 c0     ...`0...........
 594:	60 30 d8 dc c6 63 31 98 c6 e1 b0 00 00 00 00 00     `0...c1.........
 5a4:	00 00 00 00 f0 cc c6 63 3f 18 06 01 e0 00 00 00     .......c?.......
 5b4:	00 07 86 03 01 83 f0 60 30 18 0c 06 03 01 80 00     .......`0.......
 5c4:	00 00 00 00 00 00 00 01 d9 9d 86 c3 61 b0 cc e3     ............a...
 5d4:	b0 18 18 f8 00 30 18 0c 06 03 71 cc c6 63 31 98     .....0....q..c1.
 5e4:	cc 66 30 00 00 00 00 0c 06 00 00 00 c0 60 30 18     .f0..........`0.
 5f4:	0c 06 03 01 80 00 00 00 00 06 03 00 00 00 60 30     ..............`0
 604:	18 0c 06 03 01 80 c0 60 61 e0 00 30 18 0c 06 13     .......`a..0....
 614:	19 98 d8 78 36 19 8c 66 10 00 00 00 00 0c 06 03     ...x6..f........
 624:	01 80 c0 60 30 18 0c 06 03 00 e0 00 00 00 00 00     ...`0...........
 634:	00 00 00 07 33 fd b6 db 6d b6 db 6d b0 00 00 00     ....3...m..m....
 644:	00 00 00 00 00 03 f1 8c c6 63 31 98 cc 66 30 00     .........c1..f0.
 654:	00 00 00 00 00 00 00 01 e1 99 86 c3 61 b0 cc c3     ............a...
 664:	c0 00 00 00 00 00 00 00 00 06 e3 99 86 c3 61 b0     ..............a.
 674:	dc cd c6 03 01 80 00 00 00 00 00 01 d9 9d 86 c3     ................
 684:	61 b0 cc e3 b0 18 0c 06 00 00 00 00 00 01 f9 80     a...............
 694:	c0 60 30 18 0c 06 00 00 00 00 00 00 00 00 00 01     .`0.............
 6a4:	f9 80 c0 3e 01 80 c0 67 e0 00 00 00 00 0c 06 03     ...>...g........
 6b4:	01 87 f8 60 30 18 0c 06 03 00 e0 00 00 00 00 00     ...`0...........
 6c4:	00 00 00 03 19 8c c6 63 31 98 cc e3 b0 00 00 00     .......c1.......
 6d4:	00 00 00 00 00 03 19 8c c6 36 1b 07 03 80 80 00     .........6......
 6e4:	00 00 00 00 00 00 00 06 1b 0d b6 5a 3f 19 8c c4     ...........Z?...
 6f4:	20 00 00 00 00 00 00 00 00 03 19 8c 6c 1c 0e 0d      ...........l...
 704:	8c 66 30 00 00 00 00 00 00 00 00 06 1b 0c cc 26     .f0............&
 714:	1e 06 03 03 01 81 80 c0 00 00 00 00 00 03 f8 0c     ................
 724:	0c 0c 0c 0c 0c 07 f0 00 00 00 06 06 03 01 80 c0     ................
 734:	c1 c0 30 0c 06 03 01 80 c0 30 00 00 0c 06 03 01     ..0......0......
 744:	80 c0 60 30 18 0c 06 03 01 80 c0 60 00 00 18 06     ..`0.......`....
 754:	03 01 80 c0 30 0e 0c 0c 06 03 01 80 c0 c0 00 00     ....0...........
 764:	38 b6 d1 c0 00 00 00 00 00 00 00 00 00 00 00 00     8...............
 774:	00 00 aa aa aa aa aa aa aa aa aa aa aa aa aa aa     ................
 784:	a8 00 00 00 00 00 00 20 3f eb f8 fe 3f 0f 83 c0     ....... ?...?...
 794:	e0 30 08 00 00 00 00 00 20 18 09 fa fb 79 b8 d8     .0...... ....y..
 7a4:	68 30 18 08 00 00 00 00 00 1f c8 04 02 01 00 80     h0..............
 7b4:	40 20 10 08 04 02 01 fc 00 00 00 7f 1f 87 c1 e0     @ ..............
 7c4:	f0 78 3c 1e 0f 07 87 c7 e7 f0 00 00                 .x<.........

000007d0 <font_9_16>:
 7d0:	20 83 12 09 10 c8 00 00 00 00                        .........

000007da <__ctors_end>:
 7da:	11 24       	eor	r1, r1
 7dc:	1f be       	out	0x3f, r1	; 63
 7de:	cf ef       	ldi	r28, 0xFF	; 255
 7e0:	d8 e0       	ldi	r29, 0x08	; 8
 7e2:	de bf       	out	0x3e, r29	; 62
 7e4:	cd bf       	out	0x3d, r28	; 61

000007e6 <__do_copy_data>:
 7e6:	11 e0       	ldi	r17, 0x01	; 1
 7e8:	a0 e0       	ldi	r26, 0x00	; 0
 7ea:	b1 e0       	ldi	r27, 0x01	; 1
 7ec:	ec e0       	ldi	r30, 0x0C	; 12
 7ee:	ff e0       	ldi	r31, 0x0F	; 15
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <__do_copy_data+0x10>
 7f2:	05 90       	lpm	r0, Z+
 7f4:	0d 92       	st	X+, r0
 7f6:	ac 30       	cpi	r26, 0x0C	; 12
 7f8:	b1 07       	cpc	r27, r17
 7fa:	d9 f7       	brne	.-10     	; 0x7f2 <__do_copy_data+0xc>

000007fc <__do_clear_bss>:
 7fc:	21 e0       	ldi	r18, 0x01	; 1
 7fe:	ac e0       	ldi	r26, 0x0C	; 12
 800:	b1 e0       	ldi	r27, 0x01	; 1
 802:	01 c0       	rjmp	.+2      	; 0x806 <.do_clear_bss_start>

00000804 <.do_clear_bss_loop>:
 804:	1d 92       	st	X+, r1

00000806 <.do_clear_bss_start>:
 806:	ae 30       	cpi	r26, 0x0E	; 14
 808:	b2 07       	cpc	r27, r18
 80a:	e1 f7       	brne	.-8      	; 0x804 <.do_clear_bss_loop>
 80c:	0e 94 6b 07 	call	0xed6	; 0xed6 <main>
 810:	0c 94 84 07 	jmp	0xf08	; 0xf08 <_exit>

00000814 <__bad_interrupt>:
 814:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000818 <LCD_SPI>:
	asm volatile ( "out %0,%1": : "I" (_SFR_IO_ADDR(_portd_)-2), "r" (regclk) );

#endif /* LCD_PIN_CLKDATA */

	SPI_BIT_START(dta,7,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,6);
	SPI_BIT(dta,7,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,6);
 818:	2b 98       	cbi	0x05, 3	; 5
 81a:	87 fd       	sbrc	r24, 7
 81c:	2b 9a       	sbi	0x05, 3	; 5
 81e:	2d 9a       	sbi	0x05, 5	; 5
 820:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,6,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,5);
 822:	2b 98       	cbi	0x05, 3	; 5
 824:	86 fd       	sbrc	r24, 6
 826:	2b 9a       	sbi	0x05, 3	; 5
 828:	2d 9a       	sbi	0x05, 5	; 5
 82a:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,5,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,4);
 82c:	2b 98       	cbi	0x05, 3	; 5
 82e:	85 fd       	sbrc	r24, 5
 830:	2b 9a       	sbi	0x05, 3	; 5
 832:	2d 9a       	sbi	0x05, 5	; 5
 834:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,4,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,3);
 836:	2b 98       	cbi	0x05, 3	; 5
 838:	84 fd       	sbrc	r24, 4
 83a:	2b 9a       	sbi	0x05, 3	; 5
 83c:	2d 9a       	sbi	0x05, 5	; 5
 83e:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,3,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,2);
 840:	2b 98       	cbi	0x05, 3	; 5
 842:	83 fd       	sbrc	r24, 3
 844:	2b 9a       	sbi	0x05, 3	; 5
 846:	2d 9a       	sbi	0x05, 5	; 5
 848:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,2,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,1);
 84a:	2b 98       	cbi	0x05, 3	; 5
 84c:	82 fd       	sbrc	r24, 2
 84e:	2b 9a       	sbi	0x05, 3	; 5
 850:	2d 9a       	sbi	0x05, 5	; 5
 852:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,1,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,0);
 854:	2b 98       	cbi	0x05, 3	; 5
 856:	81 fd       	sbrc	r24, 1
 858:	2b 9a       	sbi	0x05, 3	; 5
 85a:	2d 9a       	sbi	0x05, 5	; 5
 85c:	2d 98       	cbi	0x05, 5	; 5
	SPI_BIT(dta,0,LCD_PORT_DATA,LCD_PIN_DATA,LCD_PORT_CLK,LCD_PIN_CLK,0);
 85e:	2b 98       	cbi	0x05, 3	; 5
 860:	80 fd       	sbrc	r24, 0
 862:	2b 9a       	sbi	0x05, 3	; 5
 864:	2d 9a       	sbi	0x05, 5	; 5
 866:	2d 98       	cbi	0x05, 5	; 5
	/* clock stays high */
}
 868:	08 95       	ret

0000086a <LCD_CMD>:
/*
  SPI command: set RS bit aka C/D, then chip select 
*/
void LCD_CMD( unsigned char cmd )
{
	BitClr(  LCD_PORT_CLK, LCD_PIN_CLK  );
 86a:	2d 98       	cbi	0x05, 5	; 5
	BitClr(  LCD_PORT_CD,  LCD_PIN_CD   );
 86c:	29 98       	cbi	0x05, 1	; 5
	CLRCS
 86e:	28 98       	cbi	0x05, 0	; 5
	LCD_SPI( cmd );
 870:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
	SETCS
 874:	28 9a       	sbi	0x05, 0	; 5
	BitSet(  LCD_PORT_CD,  LCD_PIN_CD   );
 876:	29 9a       	sbi	0x05, 1	; 5
}
 878:	08 95       	ret

0000087a <LCD_DTA>:
/*
  SPI data: clear clock, then chip select 
*/
void LCD_DTA( unsigned char dta )
{
	BitClr(  LCD_PORT_CLK, LCD_PIN_CLK  );
 87a:	2d 98       	cbi	0x05, 5	; 5
	CLRCS
 87c:	28 98       	cbi	0x05, 0	; 5
	LCD_SPI( dta );
 87e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
	SETCS
 882:	28 9a       	sbi	0x05, 0	; 5
}
 884:	08 95       	ret

00000886 <LCD_init>:
{
 886:	af 92       	push	r10
 888:	bf 92       	push	r11
 88a:	df 92       	push	r13
 88c:	ef 92       	push	r14
 88e:	ff 92       	push	r15
 890:	0f 93       	push	r16
 892:	1f 93       	push	r17
 894:	cf 93       	push	r28
 896:	df 93       	push	r29
	BitSet( LCD_DDR_CS,   LCD_PIN_CS   );
 898:	20 9a       	sbi	0x04, 0	; 4
	BitSet( LCD_DDR_RES,  LCD_PIN_RES  );
 89a:	57 9a       	sbi	0x0a, 7	; 10
	BitSet( LCD_DDR_CLK,  LCD_PIN_CLK  );
 89c:	25 9a       	sbi	0x04, 5	; 4
	BitSet( LCD_DDR_DATA, LCD_PIN_DATA );
 89e:	23 9a       	sbi	0x04, 3	; 4
	BitSet( LCD_DDR_CD,   LCD_PIN_CD   );
 8a0:	21 9a       	sbi	0x04, 1	; 4
	SETCS
 8a2:	28 9a       	sbi	0x05, 0	; 5
	BitSet(LCD_PORT_RES,  LCD_PIN_RES  );
 8a4:	5f 9a       	sbi	0x0b, 7	; 11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 8a6:	8a ef       	ldi	r24, 0xFA	; 250
 8a8:	90 e0       	ldi	r25, 0x00	; 0
 8aa:	01 97       	sbiw	r24, 0x01	; 1
 8ac:	f1 f7       	brne	.-4      	; 0x8aa <LCD_init+0x24>
	BitClr(LCD_PORT_RES,  LCD_PIN_RES  );
 8ae:	5f 98       	cbi	0x0b, 7	; 11
 8b0:	84 ed       	ldi	r24, 0xD4	; 212
 8b2:	90 e3       	ldi	r25, 0x30	; 48
 8b4:	01 97       	sbiw	r24, 0x01	; 1
 8b6:	f1 f7       	brne	.-4      	; 0x8b4 <LCD_init+0x2e>
	BitSet(LCD_PORT_RES,  LCD_PIN_RES  );
 8b8:	5f 9a       	sbi	0x0b, 7	; 11
 8ba:	80 e3       	ldi	r24, 0x30	; 48
 8bc:	95 e7       	ldi	r25, 0x75	; 117
 8be:	01 97       	sbiw	r24, 0x01	; 1
 8c0:	f1 f7       	brne	.-4      	; 0x8be <LCD_init+0x38>
 8c2:	80 e7       	ldi	r24, 0x70	; 112
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0a ef       	ldi	r16, 0xFA	; 250
 8c8:	10 e0       	ldi	r17, 0x00	; 0
 8ca:	fc 01       	movw	r30, r24
	while( (cmd = pgm_read_byte( ptr++ )) != LCD_CMD_END )
 8cc:	9f 01       	movw	r18, r30
 8ce:	2f 5f       	subi	r18, 0xFF	; 255
 8d0:	3f 4f       	sbci	r19, 0xFF	; 255
 8d2:	84 91       	lpm	r24, Z
 8d4:	81 11       	cpse	r24, r1
 8d6:	0a c0       	rjmp	.+20     	; 0x8ec <LCD_init+0x66>
}
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	df 90       	pop	r13
 8e6:	bf 90       	pop	r11
 8e8:	af 90       	pop	r10
 8ea:	08 95       	ret
		ndat   = pgm_read_byte( ptr++ );
 8ec:	7f 01       	movw	r14, r30
 8ee:	92 e0       	ldi	r25, 0x02	; 2
 8f0:	e9 0e       	add	r14, r25
 8f2:	f1 1c       	adc	r15, r1
 8f4:	f9 01       	movw	r30, r18
 8f6:	d4 91       	lpm	r29, Z
		ndat  -= delay;
 8f8:	cd 2f       	mov	r28, r29
 8fa:	cf 77       	andi	r28, 0x7F	; 127
		LCD_CMD(cmd);
 8fc:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_CMD>
		ndat   = pgm_read_byte( ptr++ );
 900:	57 01       	movw	r10, r14
		ndat  -= delay;
 902:	dc 2e       	mov	r13, r28
		while( ndat-- ) /* optional: data for command */
 904:	da 94       	dec	r13
 906:	f5 01       	movw	r30, r10
 908:	8f ef       	ldi	r24, 0xFF	; 255
 90a:	a8 1a       	sub	r10, r24
 90c:	b8 0a       	sbc	r11, r24
 90e:	9f ef       	ldi	r25, 0xFF	; 255
 910:	d9 12       	cpse	r13, r25
 912:	11 c0       	rjmp	.+34     	; 0x936 <__stack+0x37>
 914:	8c 2f       	mov	r24, r28
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	f7 01       	movw	r30, r14
 91a:	e8 0f       	add	r30, r24
 91c:	f9 1f       	adc	r31, r25
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	8e 0d       	add	r24, r14
 922:	9f 1d       	adc	r25, r15
		if( delay ) /* optional: delay after command+data */
 924:	d7 ff       	sbrs	r29, 7
 926:	d2 cf       	rjmp	.-92     	; 0x8cc <LCD_init+0x46>
			delay = pgm_read_byte( ptr++ );
 928:	e4 91       	lpm	r30, Z
			while( delay-- )
 92a:	e1 50       	subi	r30, 0x01	; 1
 92c:	70 f2       	brcs	.-100    	; 0x8ca <LCD_init+0x44>
 92e:	d8 01       	movw	r26, r16
 930:	11 97       	sbiw	r26, 0x01	; 1
 932:	f1 f7       	brne	.-4      	; 0x930 <__stack+0x31>
 934:	fa cf       	rjmp	.-12     	; 0x92a <__stack+0x2b>
			LCD_DTA(pgm_read_byte( ptr++ ));
 936:	84 91       	lpm	r24, Z
 938:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_DTA>
 93c:	e3 cf       	rjmp	.-58     	; 0x904 <__stack+0x5>

0000093e <LCD_DTA16>:

/*
  SPI Data, clear clock, then chip select for 16 Bit data
*/
void LCD_DTA16( unsigned int dta )
{
 93e:	cf 93       	push	r28
 940:	c8 2f       	mov	r28, r24
	BitClr(  LCD_PORT_CLK, LCD_PIN_CLK  );
 942:	2d 98       	cbi	0x05, 5	; 5
	CLRCS
 944:	28 98       	cbi	0x05, 0	; 5
	LCD_SPI( dta>>8 );
 946:	89 2f       	mov	r24, r25
 948:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
	LCD_SPI( dta    );
 94c:	8c 2f       	mov	r24, r28
 94e:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
	SETCS
 952:	28 9a       	sbi	0x05, 0	; 5
}
 954:	cf 91       	pop	r28
 956:	08 95       	ret

00000958 <LCD_Orientation>:
  arguments: rot = LCD_ROT_x, where x is 0,90,180,270 (e.g. LCD_ROT_90)
  note:     when rotated, keep in mind to swap LCD_Width/LCD_Height when limiting
            coordinates
*/
void LCD_Orientation( unsigned char rot )
{
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
	LCD_orientation = pgm_read_byte(&LCD_shifts[ rot ]); /* orientation encodes pixel shifts */
 95c:	c8 2f       	mov	r28, r24
 95e:	d0 e0       	ldi	r29, 0x00	; 0
 960:	fe 01       	movw	r30, r28
 962:	e8 59       	subi	r30, 0x98	; 152
 964:	ff 4f       	sbci	r31, 0xFF	; 255
 966:	e4 91       	lpm	r30, Z
 968:	e0 93 0d 01 	sts	0x010D, r30	; 0x80010d <LCD_orientation>
 
	LCD_CMD( ILI9163_CMD_SET_ADDRESS_MODE );
 96c:	86 e3       	ldi	r24, 0x36	; 54
 96e:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_CMD>
	LCD_DTA( ILI9163_RGB | pgm_read_byte( &LCD_rots[rot] ) ); 
 972:	fe 01       	movw	r30, r28
 974:	e4 59       	subi	r30, 0x94	; 148
 976:	ff 4f       	sbci	r31, 0xFF	; 255
 978:	84 91       	lpm	r24, Z
 97a:	88 60       	ori	r24, 0x08	; 8
}
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
	LCD_DTA( ILI9163_RGB | pgm_read_byte( &LCD_rots[rot] ) ); 
 980:	0c 94 3d 04 	jmp	0x87a	; 0x87a <LCD_DTA>

00000984 <LCD_SetActiveArea>:
   - xstop, ystop are x+write_width-1, y+write_height-1
   - even in rotated modes, no changes to coordinate handling are necessary in the calling code
   - write direction for subsequent data transfers is always in row-by-row order (natural raster scan)
*/
void LCD_SetActiveArea( unsigned char xstart, unsigned char ystart, unsigned char xstop, unsigned char ystop )
{
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	08 2f       	mov	r16, r24
 98e:	d6 2f       	mov	r29, r22
 990:	14 2f       	mov	r17, r20
 992:	c2 2f       	mov	r28, r18
	LCD_CMD( ILI9163_CMD_SET_COLUMN_ADDRESS );
 994:	8a e2       	ldi	r24, 0x2A	; 42
 996:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_CMD>
	LCD_DTA16( LCD_xcorr(xstart) );
 99a:	80 2f       	mov	r24, r16
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_DTA16>
	LCD_DTA16( LCD_xcorr(xstop)  );
 9a2:	81 2f       	mov	r24, r17
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_DTA16>

	LCD_CMD( ILI9163_CMD_SET_PAGE_ADDRESS   );
 9aa:	8b e2       	ldi	r24, 0x2B	; 43
 9ac:	0e 94 35 04 	call	0x86a	; 0x86a <LCD_CMD>
	LCD_DTA16( LCD_ycorr(ystart)  );
 9b0:	8d 2f       	mov	r24, r29
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_DTA16>
	LCD_DTA16( LCD_ycorr(ystop)   );
 9b8:	8c 2f       	mov	r24, r28
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_DTA16>

	LCD_CMD( ILI9163_CMD_WRITE_MEMORY_START );
 9c0:	8c e2       	ldi	r24, 0x2C	; 44
}
 9c2:	df 91       	pop	r29
 9c4:	cf 91       	pop	r28
 9c6:	1f 91       	pop	r17
 9c8:	0f 91       	pop	r16
	LCD_CMD( ILI9163_CMD_WRITE_MEMORY_START );
 9ca:	0c 94 35 04 	jmp	0x86a	; 0x86a <LCD_CMD>

000009ce <LCD_FillRect>:
{
 9ce:	ef 92       	push	r14
 9d0:	ff 92       	push	r15
 9d2:	0f 93       	push	r16
 9d4:	1f 93       	push	r17
 9d6:	cf 93       	push	r28
 9d8:	df 93       	push	r29
 	n  = w*h;
 9da:	42 9f       	mul	r20, r18
 9dc:	70 01       	movw	r14, r0
 9de:	11 24       	eor	r1, r1
	c1 = (color & 0xf800) | ((color&0x7E0)>>3); /* R8G8 */
 9e0:	e8 01       	movw	r28, r16
 9e2:	93 e0       	ldi	r25, 0x03	; 3
 9e4:	d6 95       	lsr	r29
 9e6:	c7 95       	ror	r28
 9e8:	9a 95       	dec	r25
 9ea:	e1 f7       	brne	.-8      	; 0x9e4 <LCD_FillRect+0x16>
 9ec:	cc 7f       	andi	r28, 0xFC	; 252
 9ee:	dd 27       	eor	r29, r29
 9f0:	f8 01       	movw	r30, r16
 9f2:	ee 27       	eor	r30, r30
 9f4:	f8 7f       	andi	r31, 0xF8	; 248
 9f6:	ce 2b       	or	r28, r30
 9f8:	df 2b       	or	r29, r31
	c2 = color<<3;
 9fa:	00 0f       	add	r16, r16
 9fc:	00 0f       	add	r16, r16
 9fe:	00 0f       	add	r16, r16
	LCD_SetActiveArea( x, y, x+w-1, y+h-1 );
 a00:	9f ef       	ldi	r25, 0xFF	; 255
 a02:	96 0f       	add	r25, r22
 a04:	29 0f       	add	r18, r25
 a06:	9f ef       	ldi	r25, 0xFF	; 255
 a08:	98 0f       	add	r25, r24
 a0a:	49 0f       	add	r20, r25
 a0c:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_SetActiveArea>
	LCD_STREAM_START
 a10:	2d 98       	cbi	0x05, 5	; 5
 a12:	28 98       	cbi	0x05, 0	; 5
		LCD_STREAM16( c1 ); /* write 16 bit in any case */
 a14:	1d 2f       	mov	r17, r29
	while( n-- )
 a16:	81 e0       	ldi	r24, 0x01	; 1
 a18:	e8 1a       	sub	r14, r24
 a1a:	f1 08       	sbc	r15, r1
 a1c:	40 f4       	brcc	.+16     	; 0xa2e <LCD_FillRect+0x60>
	LCD_STREAM_STOP
 a1e:	28 9a       	sbi	0x05, 0	; 5
}
 a20:	df 91       	pop	r29
 a22:	cf 91       	pop	r28
 a24:	1f 91       	pop	r17
 a26:	0f 91       	pop	r16
 a28:	ff 90       	pop	r15
 a2a:	ef 90       	pop	r14
 a2c:	08 95       	ret
		LCD_STREAM16( c1 ); /* write 16 bit in any case */
 a2e:	81 2f       	mov	r24, r17
 a30:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
 a34:	8c 2f       	mov	r24, r28
 a36:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
		LCD_STREAM8( c2  ); /* write additional byte in 12/18 bit modes (2 byte per 2 pixel or 3 byte per pixel) */
 a3a:	80 2f       	mov	r24, r16
 a3c:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
 a40:	ea cf       	rjmp	.-44     	; 0xa16 <LCD_FillRect+0x48>

00000a42 <LCD_FillScreen>:
{
 a42:	0f 93       	push	r16
 a44:	1f 93       	push	r17
 a46:	8c 01       	movw	r16, r24
	if( LCD_orientation )
 a48:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <LCD_orientation>
		LCD_FillRect( 0,0, LCD_Height, LCD_Width, color );
 a4c:	20 e8       	ldi	r18, 0x80	; 128
 a4e:	40 ea       	ldi	r20, 0xA0	; 160
	if( LCD_orientation )
 a50:	81 11       	cpse	r24, r1
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <LCD_FillScreen+0x16>
		LCD_FillRect( 0,0, LCD_Width, LCD_Height, color );
 a54:	20 ea       	ldi	r18, 0xA0	; 160
 a56:	40 e8       	ldi	r20, 0x80	; 128
 a58:	60 e0       	ldi	r22, 0x00	; 0
 a5a:	80 e0       	ldi	r24, 0x00	; 0
 a5c:	0e 94 e7 04 	call	0x9ce	; 0x9ce <LCD_FillRect>
}
 a60:	1f 91       	pop	r17
 a62:	0f 91       	pop	r16
 a64:	08 95       	ret

00000a66 <LCD_ShowImage>:
  pointer "img" must be in flash memory
  - if you need data in RAM, just clone this routine and
    remove the pgm_read_byte wrapper
*/
void LCD_ShowImage(unsigned char x, unsigned char y, unsigned char w, unsigned char h, const unsigned char *img )
{
 a66:	ef 92       	push	r14
 a68:	ff 92       	push	r15
 a6a:	0f 93       	push	r16
 a6c:	1f 93       	push	r17
 a6e:	cf 93       	push	r28
 a70:	df 93       	push	r29
	unsigned int pixels = w*h;
 a72:	42 9f       	mul	r20, r18
 a74:	f0 01       	movw	r30, r0
 a76:	11 24       	eor	r1, r1

	pixels = PIXELS2BYTES( pixels ); /* *3/2 for 12 Bit, *2 for 16 Bit, *3 for 18 Bit */
 a78:	7f 01       	movw	r14, r30
 a7a:	ee 0c       	add	r14, r14
 a7c:	ff 1c       	adc	r15, r15
 a7e:	ee 0e       	add	r14, r30
 a80:	ff 1e       	adc	r15, r31

	LCD_SetActiveArea( x, y, x+(w-1), y+(h-1) );
 a82:	9f ef       	ldi	r25, 0xFF	; 255
 a84:	96 0f       	add	r25, r22
 a86:	29 0f       	add	r18, r25
 a88:	9f ef       	ldi	r25, 0xFF	; 255
 a8a:	98 0f       	add	r25, r24
 a8c:	49 0f       	add	r20, r25
 a8e:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_SetActiveArea>

	LCD_STREAM_START
 a92:	2d 98       	cbi	0x05, 5	; 5
 a94:	28 98       	cbi	0x05, 0	; 5
	while( pixels-- )
 a96:	d0 e0       	ldi	r29, 0x00	; 0
 a98:	c0 e0       	ldi	r28, 0x00	; 0
 a9a:	ce 15       	cp	r28, r14
 a9c:	df 05       	cpc	r29, r15
 a9e:	41 f4       	brne	.+16     	; 0xab0 <LCD_ShowImage+0x4a>
	{
		LCD_STREAM8( pgm_read_byte( img++ ) );
	}
	LCD_STREAM_STOP
 aa0:	28 9a       	sbi	0x05, 0	; 5
} 
 aa2:	df 91       	pop	r29
 aa4:	cf 91       	pop	r28
 aa6:	1f 91       	pop	r17
 aa8:	0f 91       	pop	r16
 aaa:	ff 90       	pop	r15
 aac:	ef 90       	pop	r14
 aae:	08 95       	ret
		LCD_STREAM8( pgm_read_byte( img++ ) );
 ab0:	f8 01       	movw	r30, r16
 ab2:	ec 0f       	add	r30, r28
 ab4:	fd 1f       	adc	r31, r29
 ab6:	84 91       	lpm	r24, Z
 ab8:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
 abc:	21 96       	adiw	r28, 0x01	; 1
 abe:	ed cf       	rjmp	.-38     	; 0xa9a <LCD_ShowImage+0x34>

00000ac0 <LCD_PutcF>:
/*
  write character on LCD
  - use LCD_RGB( r,g,b ) to obtain f_color and b_color (where r,g,b are in 4 bit)
*/
unsigned char LCD_PutcF(char c, unsigned char x, unsigned char y, color_t f_color, color_t b_color, const Bax_font*f )
{
 ac0:	6f 92       	push	r6
 ac2:	7f 92       	push	r7
 ac4:	8f 92       	push	r8
 ac6:	9f 92       	push	r9
 ac8:	af 92       	push	r10
 aca:	bf 92       	push	r11
 acc:	cf 92       	push	r12
 ace:	df 92       	push	r13
 ad0:	ef 92       	push	r14
 ad2:	ff 92       	push	r15
 ad4:	0f 93       	push	r16
 ad6:	1f 93       	push	r17
 ad8:	cf 93       	push	r28
 ada:	df 93       	push	r29
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	28 97       	sbiw	r28, 0x08	; 8
 ae2:	0f b6       	in	r0, 0x3f	; 63
 ae4:	f8 94       	cli
 ae6:	de bf       	out	0x3e, r29	; 62
 ae8:	0f be       	out	0x3f, r0	; 63
 aea:	cd bf       	out	0x3d, r28	; 61
 aec:	68 2e       	mov	r6, r24
 aee:	76 2e       	mov	r7, r22
 af0:	64 2f       	mov	r22, r20
 af2:	69 01       	movw	r12, r18
    LCD_PP_TMPVARS
#define FGETB(a) pgm_read_byte(&a)
#define FGETW(a) pgm_read_word(&a)


    LCD_SetActiveArea( x, y, x-1+FGETB(f->width), y-1+FGETB(f->height) ); /* 1-zoom = 1 or 2 */
 af4:	47 01       	movw	r8, r14
 af6:	24 e0       	ldi	r18, 0x04	; 4
 af8:	82 0e       	add	r8, r18
 afa:	91 1c       	adc	r9, r1
 afc:	f4 01       	movw	r30, r8
 afe:	94 91       	lpm	r25, Z
 b00:	57 01       	movw	r10, r14
 b02:	f3 e0       	ldi	r31, 0x03	; 3
 b04:	af 0e       	add	r10, r31
 b06:	b1 1c       	adc	r11, r1
 b08:	f5 01       	movw	r30, r10
 b0a:	84 91       	lpm	r24, Z
 b0c:	2f ef       	ldi	r18, 0xFF	; 255
 b0e:	24 0f       	add	r18, r20
 b10:	29 0f       	add	r18, r25
 b12:	4f ef       	ldi	r20, 0xFF	; 255
 b14:	47 0d       	add	r20, r7
 b16:	48 0f       	add	r20, r24
 b18:	87 2d       	mov	r24, r7
 b1a:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_SetActiveArea>

    c -= FGETB(f->char_min);
 b1e:	f7 01       	movw	r30, r14
 b20:	84 91       	lpm	r24, Z
 b22:	68 1a       	sub	r6, r24
 b24:	86 2d       	mov	r24, r6
    if( c < 0 ) c=0; /* space */
    if( c > (FGETB(f->char_max)-FGETB(f->char_min))) c=0; /* space */
 b26:	31 96       	adiw	r30, 0x01	; 1
 b28:	94 91       	lpm	r25, Z
 b2a:	f7 01       	movw	r30, r14
 b2c:	24 91       	lpm	r18, Z
 b2e:	49 2f       	mov	r20, r25
 b30:	42 1b       	sub	r20, r18
 b32:	55 0b       	sbc	r21, r21
 b34:	64 16       	cp	r6, r20
 b36:	15 06       	cpc	r1, r21
 b38:	11 f0       	breq	.+4      	; 0xb3e <LCD_PutcF+0x7e>
 b3a:	0c f0       	brlt	.+2      	; 0xb3e <LCD_PutcF+0x7e>
 b3c:	80 e0       	ldi	r24, 0x00	; 0
    fntchar = (const unsigned char*)FGETW(f->data) + FGETB(f->stride) * c;
 b3e:	f7 01       	movw	r30, r14
 b40:	32 96       	adiw	r30, 0x02	; 2
 b42:	94 91       	lpm	r25, Z
 b44:	55 e0       	ldi	r21, 0x05	; 5
 b46:	e5 0e       	add	r14, r21
 b48:	f1 1c       	adc	r15, r1
 b4a:	f7 01       	movw	r30, r14
 b4c:	e5 90       	lpm	r14, Z+
 b4e:	f4 90       	lpm	r15, Z
 b50:	98 9f       	mul	r25, r24
 b52:	e0 0c       	add	r14, r0
 b54:	f1 1c       	adc	r15, r1
 b56:	11 24       	eor	r1, r1

    LCD_PP_SETUP(2,f_color,b_color)
 b58:	c6 01       	movw	r24, r12
 b5a:	33 e0       	ldi	r19, 0x03	; 3
 b5c:	96 95       	lsr	r25
 b5e:	87 95       	ror	r24
 b60:	3a 95       	dec	r19
 b62:	e1 f7       	brne	.-8      	; 0xb5c <LCD_PutcF+0x9c>
 b64:	8c 7f       	andi	r24, 0xFC	; 252
 b66:	99 27       	eor	r25, r25
 b68:	96 01       	movw	r18, r12
 b6a:	22 27       	eor	r18, r18
 b6c:	38 7f       	andi	r19, 0xF8	; 248
 b6e:	82 2b       	or	r24, r18
 b70:	93 2b       	or	r25, r19
 b72:	9a 83       	std	Y+2, r25	; 0x02
 b74:	89 83       	std	Y+1, r24	; 0x01
 b76:	43 e0       	ldi	r20, 0x03	; 3
 b78:	cc 0c       	add	r12, r12
 b7a:	dd 1c       	adc	r13, r13
 b7c:	4a 95       	dec	r20
 b7e:	e1 f7       	brne	.-8      	; 0xb78 <LCD_PutcF+0xb8>
 b80:	dd 24       	eor	r13, r13
 b82:	dc 82       	std	Y+4, r13	; 0x04
 b84:	cb 82       	std	Y+3, r12	; 0x03
 b86:	c8 01       	movw	r24, r16
 b88:	53 e0       	ldi	r21, 0x03	; 3
 b8a:	96 95       	lsr	r25
 b8c:	87 95       	ror	r24
 b8e:	5a 95       	dec	r21
 b90:	e1 f7       	brne	.-8      	; 0xb8a <LCD_PutcF+0xca>
 b92:	8c 7f       	andi	r24, 0xFC	; 252
 b94:	99 27       	eor	r25, r25
 b96:	98 01       	movw	r18, r16
 b98:	22 27       	eor	r18, r18
 b9a:	38 7f       	andi	r19, 0xF8	; 248
 b9c:	82 2b       	or	r24, r18
 b9e:	93 2b       	or	r25, r19
 ba0:	9e 83       	std	Y+6, r25	; 0x06
 ba2:	8d 83       	std	Y+5, r24	; 0x05
 ba4:	63 e0       	ldi	r22, 0x03	; 3
 ba6:	00 0f       	add	r16, r16
 ba8:	11 1f       	adc	r17, r17
 baa:	6a 95       	dec	r22
 bac:	e1 f7       	brne	.-8      	; 0xba6 <LCD_PutcF+0xe6>
 bae:	11 27       	eor	r17, r17
 bb0:	18 87       	std	Y+8, r17	; 0x08
 bb2:	0f 83       	std	Y+7, r16	; 0x07

    pos = 0;
    max = FGETB(f->width) * FGETB(f->height);
 bb4:	f5 01       	movw	r30, r10
 bb6:	84 91       	lpm	r24, Z
 bb8:	f4 01       	movw	r30, r8
 bba:	84 90       	lpm	r8, Z
 bbc:	88 9d       	mul	r24, r8
 bbe:	80 2c       	mov	r8, r0
 bc0:	11 24       	eor	r1, r1
    for( i=0; i < max; i++ )
 bc2:	c1 2c       	mov	r12, r1
    pos = 0;
 bc4:	d1 2c       	mov	r13, r1
    char z=0;
 bc6:	91 2c       	mov	r9, r1
    for( i=0; i < max; i++ )
 bc8:	c8 10       	cpse	r12, r8
 bca:	18 c0       	rjmp	.+48     	; 0xbfc <LCD_PutcF+0x13c>
	}
	LCD_PUTPIXEL( col, i, 0 ); /* this is not SetPixel() ! */
	pos >>= 1;
    }
 
    return x+FGETB(f->width);
 bcc:	f5 01       	movw	r30, r10
 bce:	84 91       	lpm	r24, Z
}
 bd0:	87 0d       	add	r24, r7
 bd2:	28 96       	adiw	r28, 0x08	; 8
 bd4:	0f b6       	in	r0, 0x3f	; 63
 bd6:	f8 94       	cli
 bd8:	de bf       	out	0x3e, r29	; 62
 bda:	0f be       	out	0x3f, r0	; 63
 bdc:	cd bf       	out	0x3d, r28	; 61
 bde:	df 91       	pop	r29
 be0:	cf 91       	pop	r28
 be2:	1f 91       	pop	r17
 be4:	0f 91       	pop	r16
 be6:	ff 90       	pop	r15
 be8:	ef 90       	pop	r14
 bea:	df 90       	pop	r13
 bec:	cf 90       	pop	r12
 bee:	bf 90       	pop	r11
 bf0:	af 90       	pop	r10
 bf2:	9f 90       	pop	r9
 bf4:	8f 90       	pop	r8
 bf6:	7f 90       	pop	r7
 bf8:	6f 90       	pop	r6
 bfa:	08 95       	ret
    	if( pos == 0 )
 bfc:	d1 10       	cpse	r13, r1
 bfe:	07 c0       	rjmp	.+14     	; 0xc0e <LCD_PutcF+0x14e>
    		z  = pgm_read_byte( fntchar++ );
 c00:	c7 01       	movw	r24, r14
 c02:	01 96       	adiw	r24, 0x01	; 1
 c04:	f7 01       	movw	r30, r14
 c06:	94 90       	lpm	r9, Z
 c08:	7c 01       	movw	r14, r24
		pos = 128;
 c0a:	20 e8       	ldi	r18, 0x80	; 128
 c0c:	d2 2e       	mov	r13, r18
	if( z & pos )
 c0e:	89 2d       	mov	r24, r9
 c10:	8d 21       	and	r24, r13
	col = b_color;
 c12:	02 e0       	ldi	r16, 0x02	; 2
 c14:	10 e0       	ldi	r17, 0x00	; 0
	if( z & pos )
 c16:	11 f0       	breq	.+4      	; 0xc1c <LCD_PutcF+0x15c>
		col = f_color;
 c18:	10 e0       	ldi	r17, 0x00	; 0
 c1a:	00 e0       	ldi	r16, 0x00	; 0
	LCD_PUTPIXEL( col, i, 0 ); /* this is not SetPixel() ! */
 c1c:	f8 01       	movw	r30, r16
 c1e:	ee 0f       	add	r30, r30
 c20:	ff 1f       	adc	r31, r31
 c22:	41 e0       	ldi	r20, 0x01	; 1
 c24:	50 e0       	ldi	r21, 0x00	; 0
 c26:	4c 0f       	add	r20, r28
 c28:	5d 1f       	adc	r21, r29
 c2a:	e4 0f       	add	r30, r20
 c2c:	f5 1f       	adc	r31, r21
 c2e:	80 81       	ld	r24, Z
 c30:	91 81       	ldd	r25, Z+1	; 0x01
 c32:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_DTA16>
 c36:	f8 01       	movw	r30, r16
 c38:	31 96       	adiw	r30, 0x01	; 1
 c3a:	ee 0f       	add	r30, r30
 c3c:	ff 1f       	adc	r31, r31
 c3e:	81 e0       	ldi	r24, 0x01	; 1
 c40:	90 e0       	ldi	r25, 0x00	; 0
 c42:	8c 0f       	add	r24, r28
 c44:	9d 1f       	adc	r25, r29
 c46:	e8 0f       	add	r30, r24
 c48:	f9 1f       	adc	r31, r25
 c4a:	80 81       	ld	r24, Z
 c4c:	0e 94 3d 04 	call	0x87a	; 0x87a <LCD_DTA>
	pos >>= 1;
 c50:	d6 94       	lsr	r13
    for( i=0; i < max; i++ )
 c52:	c3 94       	inc	r12
 c54:	b9 cf       	rjmp	.-142    	; 0xbc8 <LCD_PutcF+0x108>

00000c56 <LCD_Putc>:
{
 c56:	ef 92       	push	r14
 c58:	ff 92       	push	r15
 c5a:	0f 93       	push	r16
 c5c:	1f 93       	push	r17
	return LCD_PutcF(c,x,y,f_color,b_color,DEF_FONT);
 c5e:	90 ed       	ldi	r25, 0xD0	; 208
 c60:	e9 2e       	mov	r14, r25
 c62:	97 e0       	ldi	r25, 0x07	; 7
 c64:	f9 2e       	mov	r15, r25
 c66:	0e 94 60 05 	call	0xac0	; 0xac0 <LCD_PutcF>
}
 c6a:	1f 91       	pop	r17
 c6c:	0f 91       	pop	r16
 c6e:	ff 90       	pop	r15
 c70:	ef 90       	pop	r14
 c72:	08 95       	ret

00000c74 <LCD_PutsF>:

/*
  write 0-terminated String, \r or \n will force a newline (start at x=0 again)
*/
unsigned char LCD_PutsF(char *str, unsigned char x, unsigned char y, color_t f_color, color_t b_color, const Bax_font *f )
{
 c74:	3f 92       	push	r3
 c76:	4f 92       	push	r4
 c78:	5f 92       	push	r5
 c7a:	6f 92       	push	r6
 c7c:	7f 92       	push	r7
 c7e:	8f 92       	push	r8
 c80:	9f 92       	push	r9
 c82:	af 92       	push	r10
 c84:	bf 92       	push	r11
 c86:	cf 92       	push	r12
 c88:	df 92       	push	r13
 c8a:	ef 92       	push	r14
 c8c:	ff 92       	push	r15
 c8e:	0f 93       	push	r16
 c90:	1f 93       	push	r17
 c92:	cf 93       	push	r28
 c94:	df 93       	push	r29
 c96:	34 2e       	mov	r3, r20
 c98:	59 01       	movw	r10, r18
 c9a:	48 01       	movw	r8, r16
 c9c:	67 01       	movw	r12, r14
		break;

	if( (c=='\r') || (c=='\n') )
	{
		x = 0;
		y += FGETB(f->height);
 c9e:	27 01       	movw	r4, r14
 ca0:	24 e0       	ldi	r18, 0x04	; 4
 ca2:	42 0e       	add	r4, r18
 ca4:	51 1c       	adc	r5, r1
		if( y > (LCD_Height-FGETB(f->height)) )
 ca6:	20 ea       	ldi	r18, 0xA0	; 160
 ca8:	62 2e       	mov	r6, r18
 caa:	71 2c       	mov	r7, r1
    	c=*str++;
 cac:	ec 01       	movw	r28, r24
 cae:	89 91       	ld	r24, Y+
	if( !c )
 cb0:	88 23       	and	r24, r24
 cb2:	d9 f0       	breq	.+54     	; 0xcea <LCD_PutsF+0x76>
	if( (c=='\r') || (c=='\n') )
 cb4:	8d 30       	cpi	r24, 0x0D	; 13
 cb6:	11 f0       	breq	.+4      	; 0xcbc <LCD_PutsF+0x48>
 cb8:	8a 30       	cpi	r24, 0x0A	; 10
 cba:	79 f4       	brne	.+30     	; 0xcda <LCD_PutsF+0x66>
		y += FGETB(f->height);
 cbc:	f2 01       	movw	r30, r4
 cbe:	84 91       	lpm	r24, Z
 cc0:	38 0e       	add	r3, r24
		if( y > (LCD_Height-FGETB(f->height)) )
 cc2:	84 91       	lpm	r24, Z
 cc4:	93 01       	movw	r18, r6
 cc6:	28 1b       	sub	r18, r24
 cc8:	31 09       	sbc	r19, r1
 cca:	32 16       	cp	r3, r18
 ccc:	13 06       	cpc	r1, r19
 cce:	11 f0       	breq	.+4      	; 0xcd4 <LCD_PutsF+0x60>
 cd0:	0c f0       	brlt	.+2      	; 0xcd4 <LCD_PutsF+0x60>
			y = 0;
 cd2:	31 2c       	mov	r3, r1
		x = 0;
 cd4:	60 e0       	ldi	r22, 0x00	; 0
 cd6:	ce 01       	movw	r24, r28
 cd8:	e9 cf       	rjmp	.-46     	; 0xcac <LCD_PutsF+0x38>

		continue;
	}

        x = LCD_PutcF( c, x, y, f_color, b_color,f);
 cda:	76 01       	movw	r14, r12
 cdc:	84 01       	movw	r16, r8
 cde:	95 01       	movw	r18, r10
 ce0:	43 2d       	mov	r20, r3
 ce2:	0e 94 60 05 	call	0xac0	; 0xac0 <LCD_PutcF>
 ce6:	68 2f       	mov	r22, r24
 ce8:	f6 cf       	rjmp	.-20     	; 0xcd6 <LCD_PutsF+0x62>
    }  

    return x;
}
 cea:	86 2f       	mov	r24, r22
 cec:	df 91       	pop	r29
 cee:	cf 91       	pop	r28
 cf0:	1f 91       	pop	r17
 cf2:	0f 91       	pop	r16
 cf4:	ff 90       	pop	r15
 cf6:	ef 90       	pop	r14
 cf8:	df 90       	pop	r13
 cfa:	cf 90       	pop	r12
 cfc:	bf 90       	pop	r11
 cfe:	af 90       	pop	r10
 d00:	9f 90       	pop	r9
 d02:	8f 90       	pop	r8
 d04:	7f 90       	pop	r7
 d06:	6f 90       	pop	r6
 d08:	5f 90       	pop	r5
 d0a:	4f 90       	pop	r4
 d0c:	3f 90       	pop	r3
 d0e:	08 95       	ret

00000d10 <LCD_Puts>:
{
 d10:	ef 92       	push	r14
 d12:	ff 92       	push	r15
 d14:	0f 93       	push	r16
 d16:	1f 93       	push	r17
	return LCD_PutsF(str,x,y,f_color,b_color,DEF_FONT);
 d18:	50 ed       	ldi	r21, 0xD0	; 208
 d1a:	e5 2e       	mov	r14, r21
 d1c:	57 e0       	ldi	r21, 0x07	; 7
 d1e:	f5 2e       	mov	r15, r21
 d20:	0e 94 3a 06 	call	0xc74	; 0xc74 <LCD_PutsF>
}
 d24:	1f 91       	pop	r17
 d26:	0f 91       	pop	r16
 d28:	ff 90       	pop	r15
 d2a:	ef 90       	pop	r14
 d2c:	08 95       	ret

00000d2e <LCD_PutsfF>:

/*
  write 0-terminated String from flash memory, \r or \n will force a newline (start at x=0 again)
*/
unsigned char LCD_PutsfF(const char *str, unsigned char x, unsigned char y, color_t f_color, color_t b_color, const Bax_font *f)
{
 d2e:	3f 92       	push	r3
 d30:	4f 92       	push	r4
 d32:	5f 92       	push	r5
 d34:	6f 92       	push	r6
 d36:	7f 92       	push	r7
 d38:	8f 92       	push	r8
 d3a:	9f 92       	push	r9
 d3c:	af 92       	push	r10
 d3e:	bf 92       	push	r11
 d40:	cf 92       	push	r12
 d42:	df 92       	push	r13
 d44:	ef 92       	push	r14
 d46:	ff 92       	push	r15
 d48:	0f 93       	push	r16
 d4a:	1f 93       	push	r17
 d4c:	cf 93       	push	r28
 d4e:	df 93       	push	r29
 d50:	34 2e       	mov	r3, r20
 d52:	59 01       	movw	r10, r18
 d54:	48 01       	movw	r8, r16
 d56:	67 01       	movw	r12, r14
 d58:	ec 01       	movw	r28, r24
		break;

	if( (c=='\r') || (c=='\n') )
	{
		x = 0;
		y += FGETB(f->height);
 d5a:	27 01       	movw	r4, r14
 d5c:	24 e0       	ldi	r18, 0x04	; 4
 d5e:	42 0e       	add	r4, r18
 d60:	51 1c       	adc	r5, r1
		if( y > (LCD_Height-FGETB(f->height)) )
 d62:	80 ea       	ldi	r24, 0xA0	; 160
 d64:	68 2e       	mov	r6, r24
 d66:	71 2c       	mov	r7, r1
    	c=pgm_read_byte(str++);
 d68:	fe 01       	movw	r30, r28
 d6a:	84 91       	lpm	r24, Z
	if( !c )
 d6c:	88 23       	and	r24, r24
 d6e:	d9 f0       	breq	.+54     	; 0xda6 <LCD_PutsfF+0x78>
	if( (c=='\r') || (c=='\n') )
 d70:	8d 30       	cpi	r24, 0x0D	; 13
 d72:	11 f0       	breq	.+4      	; 0xd78 <LCD_PutsfF+0x4a>
 d74:	8a 30       	cpi	r24, 0x0A	; 10
 d76:	79 f4       	brne	.+30     	; 0xd96 <LCD_PutsfF+0x68>
		y += FGETB(f->height);
 d78:	f2 01       	movw	r30, r4
 d7a:	84 91       	lpm	r24, Z
 d7c:	38 0e       	add	r3, r24
		if( y > (LCD_Height-FGETB(f->height)) )
 d7e:	84 91       	lpm	r24, Z
 d80:	93 01       	movw	r18, r6
 d82:	28 1b       	sub	r18, r24
 d84:	31 09       	sbc	r19, r1
 d86:	32 16       	cp	r3, r18
 d88:	13 06       	cpc	r1, r19
 d8a:	11 f0       	breq	.+4      	; 0xd90 <LCD_PutsfF+0x62>
 d8c:	0c f0       	brlt	.+2      	; 0xd90 <LCD_PutsfF+0x62>
			y = 0;
 d8e:	31 2c       	mov	r3, r1
		x = 0;
 d90:	60 e0       	ldi	r22, 0x00	; 0
 d92:	21 96       	adiw	r28, 0x01	; 1
 d94:	e9 cf       	rjmp	.-46     	; 0xd68 <LCD_PutsfF+0x3a>

		continue;
	}

        x = LCD_PutcF( c, x, y, f_color, b_color,f );
 d96:	76 01       	movw	r14, r12
 d98:	84 01       	movw	r16, r8
 d9a:	95 01       	movw	r18, r10
 d9c:	43 2d       	mov	r20, r3
 d9e:	0e 94 60 05 	call	0xac0	; 0xac0 <LCD_PutcF>
 da2:	68 2f       	mov	r22, r24
 da4:	f6 cf       	rjmp	.-20     	; 0xd92 <LCD_PutsfF+0x64>
    }  

    return x;
}
 da6:	86 2f       	mov	r24, r22
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	1f 91       	pop	r17
 dae:	0f 91       	pop	r16
 db0:	ff 90       	pop	r15
 db2:	ef 90       	pop	r14
 db4:	df 90       	pop	r13
 db6:	cf 90       	pop	r12
 db8:	bf 90       	pop	r11
 dba:	af 90       	pop	r10
 dbc:	9f 90       	pop	r9
 dbe:	8f 90       	pop	r8
 dc0:	7f 90       	pop	r7
 dc2:	6f 90       	pop	r6
 dc4:	5f 90       	pop	r5
 dc6:	4f 90       	pop	r4
 dc8:	3f 90       	pop	r3
 dca:	08 95       	ret

00000dcc <LCD_Putsf>:
{
 dcc:	ef 92       	push	r14
 dce:	ff 92       	push	r15
 dd0:	0f 93       	push	r16
 dd2:	1f 93       	push	r17
	return LCD_PutsfF( str,x,y,f_color,b_color,DEF_FONT);
 dd4:	50 ed       	ldi	r21, 0xD0	; 208
 dd6:	e5 2e       	mov	r14, r21
 dd8:	57 e0       	ldi	r21, 0x07	; 7
 dda:	f5 2e       	mov	r15, r21
 ddc:	0e 94 97 06 	call	0xd2e	; 0xd2e <LCD_PutsfF>
}
 de0:	1f 91       	pop	r17
 de2:	0f 91       	pop	r16
 de4:	ff 90       	pop	r15
 de6:	ef 90       	pop	r14
 de8:	08 95       	ret

00000dea <LCD_SetPixel>:
  note: don't use this to draw hor/ver lines,
        use LCD_FillRect() with width/height 1
	instead
*/
void LCD_SetPixel( unsigned char x, unsigned char y, color_t f_color )
{
 dea:	cf 93       	push	r28
 dec:	df 93       	push	r29
 dee:	ea 01       	movw	r28, r20
    LCD_PP_TMPVARS

    LCD_SetActiveArea( x, y, x, y ); /* this area call makes "SetPixel" quite inefficient */
 df0:	26 2f       	mov	r18, r22
 df2:	48 2f       	mov	r20, r24
 df4:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_SetActiveArea>

    LCD_PP_SETUP(1,f_color,f_color)
 df8:	ce 01       	movw	r24, r28
 dfa:	23 e0       	ldi	r18, 0x03	; 3
 dfc:	96 95       	lsr	r25
 dfe:	87 95       	ror	r24
 e00:	2a 95       	dec	r18
 e02:	e1 f7       	brne	.-8      	; 0xdfc <LCD_SetPixel+0x12>
 e04:	8c 7f       	andi	r24, 0xFC	; 252
 e06:	99 27       	eor	r25, r25
 e08:	9e 01       	movw	r18, r28
 e0a:	22 27       	eor	r18, r18
 e0c:	38 7f       	andi	r19, 0xF8	; 248

    LCD_PUTPIXEL( f_color, 1, 1 );
 e0e:	82 2b       	or	r24, r18
 e10:	93 2b       	or	r25, r19
 e12:	0e 94 9f 04 	call	0x93e	; 0x93e <LCD_DTA16>
 e16:	8c 2f       	mov	r24, r28
 e18:	88 0f       	add	r24, r24
 e1a:	88 0f       	add	r24, r24
 e1c:	88 0f       	add	r24, r24
}
 e1e:	df 91       	pop	r29
 e20:	cf 91       	pop	r28
    LCD_PUTPIXEL( f_color, 1, 1 );
 e22:	0c 94 3d 04 	jmp	0x87a	; 0x87a <LCD_DTA>

00000e26 <LCD_ShowImage8>:
      actually used indices is lower

    - Note: slow in 12 bit mode
*/
void LCD_ShowImage8(unsigned char x, unsigned char y, unsigned char w, unsigned char h, const unsigned char *img, const color_t *colormap )
{
 e26:	7f 92       	push	r7
 e28:	8f 92       	push	r8
 e2a:	9f 92       	push	r9
 e2c:	af 92       	push	r10
 e2e:	bf 92       	push	r11
 e30:	cf 92       	push	r12
 e32:	df 92       	push	r13
 e34:	ef 92       	push	r14
 e36:	ff 92       	push	r15
 e38:	0f 93       	push	r16
 e3a:	1f 93       	push	r17
 e3c:	cf 93       	push	r28
 e3e:	df 93       	push	r29
 e40:	c4 2f       	mov	r28, r20
 e42:	72 2e       	mov	r7, r18
#ifdef _LCD_12BIT
 unsigned char c=0;
 unsigned int  ct=0;
#endif

	LCD_SetActiveArea( x, y, x+(w-1), y+(h-1) );
 e44:	2f ef       	ldi	r18, 0xFF	; 255
 e46:	26 0f       	add	r18, r22
 e48:	27 0d       	add	r18, r7
 e4a:	4f ef       	ldi	r20, 0xFF	; 255
 e4c:	48 0f       	add	r20, r24
 e4e:	4c 0f       	add	r20, r28
 e50:	0e 94 c2 04 	call	0x984	; 0x984 <LCD_SetActiveArea>

	LCD_STREAM_START
 e54:	2d 98       	cbi	0x05, 5	; 5
 e56:	28 98       	cbi	0x05, 0	; 5

	while( h-- )
 e58:	d0 e0       	ldi	r29, 0x00	; 0
 e5a:	58 01       	movw	r10, r16
 e5c:	ac 0e       	add	r10, r28
 e5e:	bd 1e       	adc	r11, r29
 e60:	7a 94       	dec	r7
 e62:	8f ef       	ldi	r24, 0xFF	; 255
 e64:	78 16       	cp	r7, r24
 e66:	41 f1       	breq	.+80     	; 0xeb8 <LCD_ShowImage8+0x92>
 e68:	68 01       	movw	r12, r16
 e6a:	20 c0       	rjmp	.+64     	; 0xeac <LCD_ShowImage8+0x86>
			a = pgm_read_byte(img++);
			b = pgm_read_word(&colormap[ a ]);
			LCD_STREAM16( b );   
#endif
#ifdef _LCD_18BIT
			a = pgm_read_byte(img++);
 e6c:	f6 01       	movw	r30, r12
 e6e:	84 91       	lpm	r24, Z
			b = pgm_read_word(&colormap[ a ]); /* 16 bit color -> convert to 18 Bit */
 e70:	e8 2f       	mov	r30, r24
 e72:	f0 e0       	ldi	r31, 0x00	; 0
 e74:	ee 0f       	add	r30, r30
 e76:	ff 1f       	adc	r31, r31
 e78:	ee 0d       	add	r30, r14
 e7a:	ff 1d       	adc	r31, r15
 e7c:	85 90       	lpm	r8, Z+
 e7e:	94 90       	lpm	r9, Z
			
			LCD_STREAM8( (b>>8) & 0xf8 );
 e80:	89 2d       	mov	r24, r9
 e82:	88 7f       	andi	r24, 0xF8	; 248
 e84:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
			LCD_STREAM8( (b>>3) & 0xfc );
 e88:	c4 01       	movw	r24, r8
 e8a:	23 e0       	ldi	r18, 0x03	; 3
 e8c:	96 95       	lsr	r25
 e8e:	87 95       	ror	r24
 e90:	2a 95       	dec	r18
 e92:	e1 f7       	brne	.-8      	; 0xe8c <LCD_ShowImage8+0x66>
 e94:	8c 7f       	andi	r24, 0xFC	; 252
 e96:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
			LCD_STREAM8( (b<<3) );
 e9a:	88 2d       	mov	r24, r8
 e9c:	88 0f       	add	r24, r24
 e9e:	88 0f       	add	r24, r24
 ea0:	88 0f       	add	r24, r24
 ea2:	0e 94 0c 04 	call	0x818	; 0x818 <LCD_SPI>
 ea6:	ff ef       	ldi	r31, 0xFF	; 255
 ea8:	cf 1a       	sub	r12, r31
 eaa:	df 0a       	sbc	r13, r31
		for( i=0; i<w ; i++ )
 eac:	ca 14       	cp	r12, r10
 eae:	db 04       	cpc	r13, r11
 eb0:	e9 f6       	brne	.-70     	; 0xe6c <LCD_ShowImage8+0x46>
 eb2:	0c 0f       	add	r16, r28
 eb4:	1d 1f       	adc	r17, r29
 eb6:	d2 cf       	rjmp	.-92     	; 0xe5c <LCD_ShowImage8+0x36>
#endif
		}
	}
	LCD_STREAM_STOP
 eb8:	28 9a       	sbi	0x05, 0	; 5
}
 eba:	df 91       	pop	r29
 ebc:	cf 91       	pop	r28
 ebe:	1f 91       	pop	r17
 ec0:	0f 91       	pop	r16
 ec2:	ff 90       	pop	r15
 ec4:	ef 90       	pop	r14
 ec6:	df 90       	pop	r13
 ec8:	cf 90       	pop	r12
 eca:	bf 90       	pop	r11
 ecc:	af 90       	pop	r10
 ece:	9f 90       	pop	r9
 ed0:	8f 90       	pop	r8
 ed2:	7f 90       	pop	r7
 ed4:	08 95       	ret

00000ed6 <main>:

uint8_t o=0;

int main( void )
{
	DDRB |= (1<<PB2); 	//Backlight pin
 ed6:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PB2);	//Backlight on
 ed8:	2a 9a       	sbi	0x05, 2	; 5
	
	
		
	 /* init display, set default orientation (optional) */
	LCD_init();
 eda:	0e 94 43 04 	call	0x886	; 0x886 <LCD_init>
	sei();
 ede:	78 94       	sei
	o = LCD_ROT_180;
 ee0:	82 e0       	ldi	r24, 0x02	; 2
 ee2:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <__data_end>
	LCD_Orientation(o);
 ee6:	0e 94 ac 04 	call	0x958	; 0x958 <LCD_Orientation>
	LCD_FillScreen( LCD_RGB(255,255,255) ); /* white where R,G,B are at max. value 255 */
 eea:	8f ef       	ldi	r24, 0xFF	; 255
 eec:	9f ef       	ldi	r25, 0xFF	; 255
 eee:	0e 94 21 05 	call	0xa42	; 0xa42 <LCD_FillScreen>
	
	LCD_Puts("Temperature",3,30,LCD_BLACK,LCD_WHITE);
 ef2:	0f ef       	ldi	r16, 0xFF	; 255
 ef4:	1f ef       	ldi	r17, 0xFF	; 255
 ef6:	30 e0       	ldi	r19, 0x00	; 0
 ef8:	20 e0       	ldi	r18, 0x00	; 0
 efa:	4e e1       	ldi	r20, 0x1E	; 30
 efc:	63 e0       	ldi	r22, 0x03	; 3
 efe:	80 e0       	ldi	r24, 0x00	; 0
 f00:	91 e0       	ldi	r25, 0x01	; 1
 f02:	0e 94 88 06 	call	0xd10	; 0xd10 <LCD_Puts>
	
	while(1)
	{
		
		
	}
 f06:	ff cf       	rjmp	.-2      	; 0xf06 <main+0x30>

00000f08 <_exit>:
 f08:	f8 94       	cli

00000f0a <__stop_program>:
 f0a:	ff cf       	rjmp	.-2      	; 0xf0a <__stop_program>
